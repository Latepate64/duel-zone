{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, isDevMode, Optional, ViewChild, Inject, NgModule } from '@angular/core';\nimport { DataSource } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\n\nfunction mixinHasStickyInput(base) {\n  return class extends base {\n    /**\n     * @param {...?} args\n     */\n    constructor(...args) {\n      super(...args);\n      this._sticky = false;\n      /**\n       * Whether the sticky input has changed since it was last checked.\n       */\n\n      this._hasStickyChanged = false;\n    }\n    /**\n     * Whether sticky positioning should be applied.\n     * @return {?}\n     */\n\n\n    get sticky() {\n      return this._sticky;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set sticky(v) {\n      /** @type {?} */\n      const prevValue = this._sticky;\n      this._sticky = coerceBooleanProperty(v);\n      this._hasStickyChanged = prevValue !== this._sticky;\n    }\n    /**\n     * Whether the sticky value has changed since this was last called.\n     * @return {?}\n     */\n\n\n    hasStickyChanged() {\n      /** @type {?} */\n      const hasStickyChanged = this._hasStickyChanged;\n      this._hasStickyChanged = false;\n      return hasStickyChanged;\n    }\n    /**\n     * Resets the dirty check for cases where the sticky state has been used without checking.\n     * @return {?}\n     */\n\n\n    resetStickyChanged() {\n      this._hasStickyChanged = false;\n    }\n\n  };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n\n\nclass CdkCellDef {\n  /**\n   * @param {?} template\n   */\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) {\n  return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellDef,\n  selectors: [[\"\", \"cdkCellDef\", \"\"]]\n});\n/** @nocollapse */\n\nCdkCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n\n\nclass CdkHeaderCellDef {\n  /**\n   * @param {?} template\n   */\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) {\n  return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCellDef,\n  selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]]\n});\n/** @nocollapse */\n\nCdkHeaderCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n\n\nclass CdkFooterCellDef {\n  /**\n   * @param {?} template\n   */\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) {\n  return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\n\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCellDef,\n  selectors: [[\"\", \"cdkFooterCellDef\", \"\"]]\n});\n/** @nocollapse */\n\nCdkFooterCellDef.ctorParameters = () => [{\n  type: TemplateRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterCellDef]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private\n */\n\n\nclass CdkColumnDefBase {}\n/** @type {?} */\n\n\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\n\n\nclass CdkColumnDef extends _CdkColumnDefBase {\n  constructor() {\n    super(...arguments);\n    this._stickyEnd = false;\n  }\n  /**\n   * Unique name for this column.\n   * @return {?}\n   */\n\n\n  get name() {\n    return this._name;\n  }\n  /**\n   * @param {?} name\n   * @return {?}\n   */\n\n\n  set name(name) {\n    // If the directive is set without a name (updated programatically), then this setter will\n    // trigger with an empty string and should not overwrite the programatically set value.\n    if (!name) {\n      return;\n    }\n\n    this._name = name;\n    this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n  }\n  /**\n   * Whether this column should be sticky positioned on the end of the row. Should make sure\n   * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n   * has been changed.\n   * @return {?}\n   */\n\n\n  get stickyEnd() {\n    return this._stickyEnd;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n\n\n  set stickyEnd(v) {\n    /** @type {?} */\n    const prevValue = this._stickyEnd;\n    this._stickyEnd = coerceBooleanProperty(v);\n    this._hasStickyChanged = prevValue !== this._stickyEnd;\n  }\n\n}\n\nCdkColumnDef.ɵfac = /*@__PURE__*/function () {\n  let ɵCdkColumnDef_BaseFactory;\n  return function CdkColumnDef_Factory(t) {\n    return (ɵCdkColumnDef_BaseFactory || (ɵCdkColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CdkColumnDef)))(t || CdkColumnDef);\n  };\n}();\n\nCdkColumnDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkColumnDef,\n  selectors: [[\"\", \"cdkColumnDef\", \"\"]],\n  contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    }\n  },\n  inputs: {\n    sticky: \"sticky\",\n    name: [\"cdkColumnDef\", \"name\"],\n    stickyEnd: \"stickyEnd\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nCdkColumnDef.propDecorators = {\n  name: [{\n    type: Input,\n    args: ['cdkColumnDef']\n  }],\n  stickyEnd: [{\n    type: Input,\n    args: ['stickyEnd']\n  }],\n  cell: [{\n    type: ContentChild,\n    args: [CdkCellDef]\n  }],\n  headerCell: [{\n    type: ContentChild,\n    args: [CdkHeaderCellDef]\n  }],\n  footerCell: [{\n    type: ContentChild,\n    args: [CdkFooterCellDef]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkColumnDef]',\n      inputs: ['sticky']\n    }]\n  }], null, {\n    name: [{\n      type: Input,\n      args: ['cdkColumnDef']\n    }],\n    stickyEnd: [{\n      type: Input,\n      args: ['stickyEnd']\n    }],\n    cell: [{\n      type: ContentChild,\n      args: [CdkCellDef]\n    }],\n    headerCell: [{\n      type: ContentChild,\n      args: [CdkHeaderCellDef]\n    }],\n    footerCell: [{\n      type: ContentChild,\n      args: [CdkFooterCellDef]\n    }]\n  });\n})();\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\n\n\nclass BaseCdkCell {\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  constructor(columnDef, elementRef) {\n    /** @type {?} */\n    const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n    elementRef.nativeElement.classList.add(columnClassName);\n  }\n\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\n\n\nclass CdkHeaderCell extends BaseCdkCell {\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n  }\n\n}\n\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) {\n  return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkHeaderCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderCell,\n  selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]],\n  hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkHeaderCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-header-cell, th[cdk-header-cell]',\n      host: {\n        'class': 'cdk-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Footer cell template container that adds the right classes and role.\n */\n\n\nclass CdkFooterCell extends BaseCdkCell {\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n  }\n\n}\n\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) {\n  return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkFooterCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterCell,\n  selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkFooterCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n      host: {\n        'class': 'cdk-footer-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Cell template container that adds the right classes and role.\n */\n\n\nclass CdkCell extends BaseCdkCell {\n  /**\n   * @param {?} columnDef\n   * @param {?} elementRef\n   */\n  constructor(columnDef, elementRef) {\n    super(columnDef, elementRef);\n  }\n\n}\n\nCdkCell.ɵfac = function CdkCell_Factory(t) {\n  return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCdkCell.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCell,\n  selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkCell.ctorParameters = () => [{\n  type: CdkColumnDef\n}, {\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-cell, td[cdk-cell]',\n      host: {\n        'class': 'cdk-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], function () {\n    return [{\n      type: CdkColumnDef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n  @type {?} */\n\n\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\n\nclass BaseRowDef {\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  constructor(template, _differs) {\n    this.template = template;\n    this._differs = _differs;\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  ngOnChanges(changes) {\n    // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n    // of the columns property or an empty array if none is provided.\n    if (!this._columnsDiffer) {\n      /** @type {?} */\n      const columns = changes['columns'] && changes['columns'].currentValue || [];\n      this._columnsDiffer = this._differs.find(columns).create();\n\n      this._columnsDiffer.diff(columns);\n    }\n  }\n  /**\n   * Returns the difference between the current columns and the columns from the last diff, or null\n   * if there is no difference.\n   * @return {?}\n   */\n\n\n  getColumnsDiff() {\n    return this._columnsDiffer.diff(this.columns);\n  }\n  /**\n   * Gets this row def's relevant cell template from the provided column def.\n   * @param {?} column\n   * @return {?}\n   */\n\n\n  extractCellTemplate(column) {\n    if (this instanceof CdkHeaderRowDef) {\n      return column.headerCell.template;\n    }\n\n    if (this instanceof CdkFooterRowDef) {\n      return column.footerCell.template;\n    } else {\n      return column.cell.template;\n    }\n  }\n\n}\n\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\n\nBaseRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: BaseRowDef,\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/**\n * \\@docs-private\n */\n\nclass CdkHeaderRowDefBase extends BaseRowDef {}\n/** @type {?} */\n\n\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n\n\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  constructor(template, _differs) {\n    super(template, _differs);\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n\n}\n\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) {\n  return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkHeaderRowDef,\n  selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkHeaderRowDef\", \"columns\"],\n    sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nCdkHeaderRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkHeaderRowDef]',\n      inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private\n */\n\n\nclass CdkFooterRowDefBase extends BaseRowDef {}\n/** @type {?} */\n\n\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n\n\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  constructor(template, _differs) {\n    super(template, _differs);\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n  }\n\n}\n\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) {\n  return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkFooterRowDef,\n  selectors: [[\"\", \"cdkFooterRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkFooterRowDef\", \"columns\"],\n    sticky: [\"cdkFooterRowDefSticky\", \"sticky\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nCdkFooterRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkFooterRowDef]',\n      inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\n\n\nclass CdkRowDef extends BaseRowDef {\n  /**\n   * @param {?} template\n   * @param {?} _differs\n   */\n  constructor(template, _differs) {\n    super(template, _differs);\n  }\n\n}\n\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) {\n  return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n};\n\nCdkRowDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkRowDef,\n  selectors: [[\"\", \"cdkRowDef\", \"\"]],\n  inputs: {\n    columns: [\"cdkRowDefColumns\", \"columns\"],\n    when: [\"cdkRowDefWhen\", \"when\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCdkRowDef.ctorParameters = () => [{\n  type: TemplateRef\n}, {\n  type: IterableDiffers\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkRowDef]',\n      inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.TemplateRef\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }];\n  }, null);\n})();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\n\n\nclass CdkCellOutlet {\n  /**\n   * @param {?} _viewContainer\n   */\n  constructor(_viewContainer) {\n    this._viewContainer = _viewContainer;\n    CdkCellOutlet.mostRecentCellOutlet = this;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    // If this was the last outlet being rendered in the view, remove the reference\n    // from the static property after it has been destroyed to avoid leaking memory.\n    if (CdkCellOutlet.mostRecentCellOutlet === this) {\n      CdkCellOutlet.mostRecentCellOutlet = null;\n    }\n  }\n\n}\n\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) {\n  return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n};\n\nCdkCellOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkCellOutlet,\n  selectors: [[\"\", \"cdkCellOutlet\", \"\"]]\n});\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\n\nCdkCellOutlet.mostRecentCellOutlet = null;\n/** @nocollapse */\n\nCdkCellOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCellOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }];\n  }, null);\n})();\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\n\n\nclass CdkHeaderRow {}\n\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) {\n  return new (t || CdkHeaderRow)();\n};\n\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkHeaderRow,\n  selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkHeaderRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-header-row, tr[cdk-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-header-row',\n        'role': 'row'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\n\n\nclass CdkFooterRow {}\n\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) {\n  return new (t || CdkFooterRow)();\n};\n\nCdkFooterRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkFooterRow,\n  selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkFooterRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-footer-row, tr[cdk-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-footer-row',\n        'role': 'row'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\n\n\nclass CdkRow {}\n\nCdkRow.ɵfac = function CdkRow_Factory(t) {\n  return new (t || CdkRow)();\n};\n\nCdkRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkRow,\n  selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function CdkRow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [CdkCellOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-row, tr[cdk-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'cdk-row',\n        'role': 'row'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\n\n\nfunction getTableUnknownColumnError(id) {\n  return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\n\n\nfunction getTableDuplicateColumnNameError(name) {\n  return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTableMultipleDefaultRowDefsError() {\n  return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\n\n\nfunction getTableMissingMatchingRowDefError(data) {\n  return Error(`Could not find a matching row definition for the` + `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTableMissingRowDefsError() {\n  return Error('Missing definitions for header, footer, and row; ' + 'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getTableUnknownDataSourceError() {\n  return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n  @type {?} */\n\n\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\n\nclass StickyStyler {\n  /**\n   * @param {?} isNativeHtmlTable Whether the sticky logic should be based on a table\n   *     that uses the native `<table>` element.\n   * @param {?} stickCellCss The CSS class that will be applied to every row/cell that has\n   *     sticky positioning applied.\n   * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n   *     by reversing left/right positions.\n   * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n   */\n  constructor(isNativeHtmlTable, stickCellCss, direction, _isBrowser = true) {\n    this.isNativeHtmlTable = isNativeHtmlTable;\n    this.stickCellCss = stickCellCss;\n    this.direction = direction;\n    this._isBrowser = _isBrowser;\n  }\n  /**\n   * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n   * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n   * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n   * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n   * @return {?}\n   */\n\n\n  clearStickyPositioning(rows, stickyDirections) {\n    for (const row of rows) {\n      // If the row isn't an element (e.g. if it's an `ng-container`),\n      // it won't have inline styles or `children` so we skip it.\n      if (row.nodeType !== row.ELEMENT_NODE) {\n        continue;\n      }\n\n      this._removeStickyStyle(row, stickyDirections);\n\n      for (let i = 0; i < row.children.length; i++) {\n        /** @type {?} */\n        const cell =\n        /** @type {?} */\n        row.children[i];\n\n        this._removeStickyStyle(cell, stickyDirections);\n      }\n    }\n  }\n  /**\n   * Applies sticky left and right positions to the cells of each row according to the sticky\n   * states of the rendered column definitions.\n   * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n   * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the start of the row.\n   * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n   *     in this index position should be stuck to the end of the row.\n   * @return {?}\n   */\n\n\n  updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n    /** @type {?} */\n    const hasStickyColumns = stickyStartStates.some(state => state) || stickyEndStates.some(state => state);\n\n    if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const firstRow = rows[0];\n    /** @type {?} */\n\n    const numCells = firstRow.children.length;\n    /** @type {?} */\n\n    const cellWidths = this._getCellWidths(firstRow);\n    /** @type {?} */\n\n\n    const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n    /** @type {?} */\n\n\n    const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n    /** @type {?} */\n\n\n    const isRtl = this.direction === 'rtl';\n\n    for (const row of rows) {\n      for (let i = 0; i < numCells; i++) {\n        /** @type {?} */\n        const cell =\n        /** @type {?} */\n        row.children[i];\n\n        if (stickyStartStates[i]) {\n          this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n        }\n\n        if (stickyEndStates[i]) {\n          this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n        }\n      }\n    }\n  }\n  /**\n   * Applies sticky positioning to the row's cells if using the native table layout, and to the\n   * row itself otherwise.\n   * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n   *     sticky state and to the provided top or bottom position.\n   * @param {?} stickyStates A list of boolean states where each state represents whether the row\n   *     should be stuck in the particular top or bottom position.\n   * @param {?} position The position direction in which the row should be stuck if that row should be\n   *     sticky.\n   *\n   * @return {?}\n   */\n\n\n  stickRows(rowsToStick, stickyStates, position) {\n    // Since we can't measure the rows on the server, we can't stick the rows properly.\n    if (!this._isBrowser) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n    /** @type {?} */\n\n    let stickyHeight = 0;\n\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n      if (!stickyStates[rowIndex]) {\n        continue;\n      }\n      /** @type {?} */\n\n\n      const row = rows[rowIndex];\n\n      if (this.isNativeHtmlTable) {\n        for (let j = 0; j < row.children.length; j++) {\n          /** @type {?} */\n          const cell =\n          /** @type {?} */\n          row.children[j];\n\n          this._addStickyStyle(cell, position, stickyHeight);\n        }\n      } else {\n        // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n        // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n        this._addStickyStyle(row, position, stickyHeight);\n      }\n\n      if (rowIndex === rows.length - 1) {\n        // prevent unnecessary reflow from getBoundingClientRect()\n        return;\n      }\n\n      stickyHeight += row.getBoundingClientRect().height;\n    }\n  }\n  /**\n   * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n   * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n   * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n   * the tfoot element.\n   * @param {?} tableElement\n   * @param {?} stickyStates\n   * @return {?}\n   */\n\n\n  updateStickyFooterContainer(tableElement, stickyStates) {\n    if (!this.isNativeHtmlTable) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const tfoot =\n    /** @type {?} */\n    tableElement.querySelector('tfoot');\n\n    if (stickyStates.some(state => !state)) {\n      this._removeStickyStyle(tfoot, ['bottom']);\n    } else {\n      this._addStickyStyle(tfoot, 'bottom', 0);\n    }\n  }\n  /**\n   * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n   * the zIndex, removing each of the provided sticky directions, and removing the\n   * sticky position if there are no more directions.\n   * @param {?} element\n   * @param {?} stickyDirections\n   * @return {?}\n   */\n\n\n  _removeStickyStyle(element, stickyDirections) {\n    for (const dir of stickyDirections) {\n      element.style[dir] = '';\n    }\n\n    element.style.zIndex = this._getCalculatedZIndex(element);\n    /** @type {?} */\n\n    const hasDirection = STICKY_DIRECTIONS.some(dir => !!element.style[dir]);\n\n    if (!hasDirection) {\n      element.style.position = '';\n      element.classList.remove(this.stickCellCss);\n    }\n  }\n  /**\n   * Adds the sticky styling to the element by adding the sticky style class, changing position\n   * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n   * direction and value.\n   * @param {?} element\n   * @param {?} dir\n   * @param {?} dirValue\n   * @return {?}\n   */\n\n\n  _addStickyStyle(element, dir, dirValue) {\n    element.classList.add(this.stickCellCss);\n    element.style[dir] = `${dirValue}px`;\n    element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n    element.style.zIndex = this._getCalculatedZIndex(element);\n  }\n  /**\n   * Calculate what the z-index should be for the element, depending on what directions (top,\n   * bottom, left, right) have been set. It should be true that elements with a top direction\n   * should have the highest index since these are elements like a table header. If any of those\n   * elements are also sticky in another direction, then they should appear above other elements\n   * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n   * (e.g. footer rows) should then be next in the ordering such that they are below the header\n   * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n   * should minimally increment so that they are above non-sticky elements but below top and bottom\n   * elements.\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _getCalculatedZIndex(element) {\n    /** @type {?} */\n    const zIndexIncrements = {\n      top: 100,\n      bottom: 10,\n      left: 1,\n      right: 1\n    };\n    /** @type {?} */\n\n    let zIndex = 0;\n\n    for (const dir of STICKY_DIRECTIONS) {\n      if (element.style[dir]) {\n        zIndex += zIndexIncrements[dir];\n      }\n    }\n\n    return zIndex ? `${zIndex}` : '';\n  }\n  /**\n   * Gets the widths for each cell in the provided row.\n   * @param {?} row\n   * @return {?}\n   */\n\n\n  _getCellWidths(row) {\n    /** @type {?} */\n    const cellWidths = [];\n    /** @type {?} */\n\n    const firstRowCells = row.children;\n\n    for (let i = 0; i < firstRowCells.length; i++) {\n      /** @type {?} */\n      let cell =\n      /** @type {?} */\n      firstRowCells[i];\n      cellWidths.push(cell.getBoundingClientRect().width);\n    }\n\n    return cellWidths;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   * @param {?} widths\n   * @param {?} stickyStates\n   * @return {?}\n   */\n\n\n  _getStickyStartColumnPositions(widths, stickyStates) {\n    /** @type {?} */\n    const positions = [];\n    /** @type {?} */\n\n    let nextPosition = 0;\n\n    for (let i = 0; i < widths.length; i++) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n  /**\n   * Determines the left and right positions of each sticky column cell, which will be the\n   * accumulation of all sticky column cell widths to the left and right, respectively.\n   * Non-sticky cells do not need to have a value set since their positions will not be applied.\n   * @param {?} widths\n   * @param {?} stickyStates\n   * @return {?}\n   */\n\n\n  _getStickyEndColumnPositions(widths, stickyStates) {\n    /** @type {?} */\n    const positions = [];\n    /** @type {?} */\n\n    let nextPosition = 0;\n\n    for (let i = widths.length; i > 0; i--) {\n      if (stickyStates[i]) {\n        positions[i] = nextPosition;\n        nextPosition += widths[i];\n      }\n    }\n\n    return positions;\n  }\n\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\n\n\nclass DataRowOutlet {\n  /**\n   * @param {?} viewContainer\n   * @param {?} elementRef\n   */\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n\n}\n\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) {\n  return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nDataRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: DataRowOutlet,\n  selectors: [[\"\", \"rowOutlet\", \"\"]]\n});\n/** @nocollapse */\n\nDataRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[rowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\n\n\nclass HeaderRowOutlet {\n  /**\n   * @param {?} viewContainer\n   * @param {?} elementRef\n   */\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n\n}\n\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) {\n  return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: HeaderRowOutlet,\n  selectors: [[\"\", \"headerRowOutlet\", \"\"]]\n});\n/** @nocollapse */\n\nHeaderRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[headerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\n\n\nclass FooterRowOutlet {\n  /**\n   * @param {?} viewContainer\n   * @param {?} elementRef\n   */\n  constructor(viewContainer, elementRef) {\n    this.viewContainer = viewContainer;\n    this.elementRef = elementRef;\n  }\n\n}\n\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) {\n  return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nFooterRowOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: FooterRowOutlet,\n  selectors: [[\"\", \"footerRowOutlet\", \"\"]]\n});\n/** @nocollapse */\n\nFooterRowOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: ElementRef\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[footerRowOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }];\n  }, null);\n})();\n/** *\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n  @type {?} */\n\n\nconst CDK_TABLE_TEMPLATE = `\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\n\nclass CdkTable {\n  /**\n   * @param {?} _differs\n   * @param {?} _changeDetectorRef\n   * @param {?} _elementRef\n   * @param {?} role\n   * @param {?} _dir\n   * @param {?=} _document\n   * @param {?=} _platform\n   */\n  constructor(_differs, _changeDetectorRef, _elementRef, role, _dir,\n  /**\n  * @deprecated\n  * @breaking-change 8.0.0 `_document` and `_platform` to\n  *    be made into a required parameters.\n  */\n  _document, _platform) {\n    this._differs = _differs;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._dir = _dir;\n    this._platform = _platform;\n    /**\n     * Subject that emits when the component has been destroyed.\n     */\n\n    this._onDestroy = new Subject();\n    /**\n     * Map of all the user's defined columns (header, data, and footer cell template) identified by\n     * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n     * any custom column definitions added to `_customColumnDefs`.\n     */\n\n    this._columnDefsByName = new Map();\n    /**\n     * Column definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * column definitions as *it's* content child.\n     */\n\n    this._customColumnDefs = new Set();\n    /**\n     * Data row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in data rows as *it's* content child.\n     */\n\n    this._customRowDefs = new Set();\n    /**\n     * Header row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n     * built-in header rows as *it's* content child.\n     */\n\n    this._customHeaderRowDefs = new Set();\n    /**\n     * Footer row definitions that were defined outside of the direct content children of the table.\n     * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n     * built-in footer row as *it's* content child.\n     */\n\n    this._customFooterRowDefs = new Set();\n    /**\n     * Whether the header row definition has been changed. Triggers an update to the header row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._headerRowDefChanged = true;\n    /**\n     * Whether the footer row definition has been changed. Triggers an update to the footer row after\n     * content is checked. Initialized as true so that the table renders the initial set of rows.\n     */\n\n    this._footerRowDefChanged = true;\n    /**\n     * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n     * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n     * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n     * and row template matches, which allows the `IterableDiffer` to check rows by reference\n     * and understand which rows are added/moved/removed.\n     *\n     * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n     * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n     * contains an array of created pairs. The array is necessary to handle cases where the data\n     * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n     * stored.\n     */\n\n    this._cachedRenderRowsMap = new Map();\n    /**\n     * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n     * table subclasses.\n     */\n\n    this.stickyCssClass = 'cdk-table-sticky';\n    this._multiTemplateDataRows = false;\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n\n    this.viewChange = new BehaviorSubject({\n      start: 0,\n      end: Number.MAX_VALUE\n    });\n\n    if (!role) {\n      this._elementRef.nativeElement.setAttribute('role', 'grid');\n    }\n\n    this._document = _document;\n    this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n  }\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n   * relative to the function to know if a row should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   * @return {?}\n   */\n\n\n  get trackBy() {\n    return this._trackByFn;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  set trackBy(fn) {\n    if (isDevMode() && fn != null && typeof fn !== 'function' &&\n    /** @type {?} */\n    console &&\n    /** @type {?} */\n    console.warn) {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n\n    this._trackByFn = fn;\n  }\n  /**\n   * The table's source of data, which can be provided in three ways (in order of complexity):\n   *   - Simple data array (each object represents one table row)\n   *   - Stream that emits a data array each time the array changes\n   *   - `DataSource` object that implements the connect/disconnect interface.\n   *\n   * If a data array is provided, the table must be notified when the array's objects are\n   * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n   * render the diff since the last table render. If the data array reference is changed, the table\n   * will automatically trigger an update to the rows.\n   *\n   * When providing an Observable stream, the table will trigger an update automatically when the\n   * stream emits a new array of data.\n   *\n   * Finally, when providing a `DataSource` object, the table will use the Observable stream\n   * provided by the connect function and trigger updates when that stream emits new data array\n   * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n   * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n   * subscriptions registered during the connect process).\n   * @return {?}\n   */\n\n\n  get dataSource() {\n    return this._dataSource;\n  }\n  /**\n   * @param {?} dataSource\n   * @return {?}\n   */\n\n\n  set dataSource(dataSource) {\n    if (this._dataSource !== dataSource) {\n      this._switchDataSource(dataSource);\n    }\n  }\n  /**\n   * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n   * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n   * dataobject will render the first row that evaluates its when predicate to true, in the order\n   * defined in the table, or otherwise the default row which does not have a when predicate.\n   * @return {?}\n   */\n\n\n  get multiTemplateDataRows() {\n    return this._multiTemplateDataRows;\n  }\n  /**\n   * @param {?} v\n   * @return {?}\n   */\n\n\n  set multiTemplateDataRows(v) {\n    this._multiTemplateDataRows = coerceBooleanProperty(v);\n\n    if (this._rowOutlet.viewContainer.length) {\n      this._forceRenderDataRows();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnInit() {\n    this._setupStickyStyler();\n\n    if (this._isNativeHtmlTable) {\n      this._applyNativeTableSections();\n    } // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n    // the user has provided a custom trackBy, return the result of that function as evaluated\n    // with the values of the `RenderRow`'s data and index.\n\n\n    this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n      return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentChecked() {\n    // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n    this._cacheRowDefs();\n\n    this._cacheColumnDefs(); // Make sure that the user has at least added header, footer, or data row def.\n\n\n    if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n      throw getTableMissingRowDefsError();\n    } // Render updates if the list of columns have been changed for the header, row, or footer defs.\n\n\n    this._renderUpdatedColumns(); // If the header row definition has been changed, trigger a render to the header row.\n\n\n    if (this._headerRowDefChanged) {\n      this._forceRenderHeaderRows();\n\n      this._headerRowDefChanged = false;\n    } // If the footer row definition has been changed, trigger a render to the footer row.\n\n\n    if (this._footerRowDefChanged) {\n      this._forceRenderFooterRows();\n\n      this._footerRowDefChanged = false;\n    } // If there is a data source and row definitions, connect to the data source unless a\n    // connection has already been made.\n\n\n    if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n      this._observeRenderChanges();\n    }\n\n    this._checkStickyStates();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._rowOutlet.viewContainer.clear();\n\n    this._headerRowOutlet.viewContainer.clear();\n\n    this._footerRowOutlet.viewContainer.clear();\n\n    this._cachedRenderRowsMap.clear();\n\n    this._onDestroy.next();\n\n    this._onDestroy.complete();\n\n    if (this.dataSource instanceof DataSource) {\n      this.dataSource.disconnect(this);\n    }\n  }\n  /**\n   * Renders rows based on the table's latest set of data, which was either provided directly as an\n   * input or retrieved through an Observable stream (directly or from a DataSource).\n   * Checks for differences in the data since the last diff to perform only the necessary\n   * changes (add/remove/move rows).\n   *\n   * If the table's data source is a DataSource or Observable, this will be invoked automatically\n   * each time the provided Observable stream emits a new data array. Otherwise if your data is\n   * an array, this function will need to be called to render any changes.\n   * @return {?}\n   */\n\n\n  renderRows() {\n    this._renderRows = this._getAllRenderRows();\n    /** @type {?} */\n\n    const changes = this._dataDiffer.diff(this._renderRows);\n\n    if (!changes) {\n      return;\n    }\n    /** @type {?} */\n\n\n    const viewContainer = this._rowOutlet.viewContainer;\n    changes.forEachOperation((record, prevIndex, currentIndex) => {\n      if (record.previousIndex == null) {\n        this._insertRow(record.item,\n        /** @type {?} */\n        currentIndex);\n      } else if (currentIndex == null) {\n        viewContainer.remove(\n        /** @type {?} */\n        prevIndex);\n      } else {\n        /** @type {?} */\n        const view =\n        /** @type {?} */\n        viewContainer.get(\n        /** @type {?} */\n        prevIndex);\n        viewContainer.move(\n        /** @type {?} */\n        view, currentIndex);\n      }\n    }); // Update the meta context of a row's context data (index, count, first, last, ...)\n\n    this._updateRowIndexContext(); // Update rows that did not get added/removed/moved but may have had their identity changed,\n    // e.g. if trackBy matched data on some property but the actual data reference changed.\n\n\n    changes.forEachIdentityChange(record => {\n      /** @type {?} */\n      const rowView =\n      /** @type {?} */\n      viewContainer.get(\n      /** @type {?} */\n      record.currentIndex);\n      rowView.context.$implicit = record.item.data;\n    });\n    this.updateStickyColumnStyles();\n  }\n  /**\n   * Sets the header row definition to be used. Overrides the header row definition gathered by\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n   * table's content is checked.\n   * \\@docs-private\n   * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n   * \\@breaking-change 8.0.0\n   * @param {?} headerRowDef\n   * @return {?}\n   */\n\n\n  setHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs = new Set([headerRowDef]);\n    this._headerRowDefChanged = true;\n  }\n  /**\n   * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n   * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n   * table's content is checked.\n   * \\@docs-private\n   * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n   * \\@breaking-change 8.0.0\n   * @param {?} footerRowDef\n   * @return {?}\n   */\n\n\n  setFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs = new Set([footerRowDef]);\n    this._footerRowDefChanged = true;\n  }\n  /**\n   * Adds a column definition that was not included as part of the content children.\n   * @param {?} columnDef\n   * @return {?}\n   */\n\n\n  addColumnDef(columnDef) {\n    this._customColumnDefs.add(columnDef);\n  }\n  /**\n   * Removes a column definition that was not included as part of the content children.\n   * @param {?} columnDef\n   * @return {?}\n   */\n\n\n  removeColumnDef(columnDef) {\n    this._customColumnDefs.delete(columnDef);\n  }\n  /**\n   * Adds a row definition that was not included as part of the content children.\n   * @param {?} rowDef\n   * @return {?}\n   */\n\n\n  addRowDef(rowDef) {\n    this._customRowDefs.add(rowDef);\n  }\n  /**\n   * Removes a row definition that was not included as part of the content children.\n   * @param {?} rowDef\n   * @return {?}\n   */\n\n\n  removeRowDef(rowDef) {\n    this._customRowDefs.delete(rowDef);\n  }\n  /**\n   * Adds a header row definition that was not included as part of the content children.\n   * @param {?} headerRowDef\n   * @return {?}\n   */\n\n\n  addHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.add(headerRowDef);\n\n    this._headerRowDefChanged = true;\n  }\n  /**\n   * Removes a header row definition that was not included as part of the content children.\n   * @param {?} headerRowDef\n   * @return {?}\n   */\n\n\n  removeHeaderRowDef(headerRowDef) {\n    this._customHeaderRowDefs.delete(headerRowDef);\n\n    this._headerRowDefChanged = true;\n  }\n  /**\n   * Adds a footer row definition that was not included as part of the content children.\n   * @param {?} footerRowDef\n   * @return {?}\n   */\n\n\n  addFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.add(footerRowDef);\n\n    this._footerRowDefChanged = true;\n  }\n  /**\n   * Removes a footer row definition that was not included as part of the content children.\n   * @param {?} footerRowDef\n   * @return {?}\n   */\n\n\n  removeFooterRowDef(footerRowDef) {\n    this._customFooterRowDefs.delete(footerRowDef);\n\n    this._footerRowDefChanged = true;\n  }\n  /**\n   * Updates the header sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n   * automatically called when the header row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   * @return {?}\n   */\n\n\n  updateStickyHeaderRowStyles() {\n    /** @type {?} */\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n\n    this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n    /** @type {?} */\n\n\n    const stickyStates = this._headerRowDefs.map(def => def.sticky);\n\n    this._stickyStyler.stickRows(headerRows, stickyStates, 'top'); // Reset the dirty state of the sticky input change since it has been used.\n\n\n    this._headerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n   * automatically called when the footer row changes its displayed set of columns, or if its\n   * sticky input changes. May be called manually for cases where the cell content changes outside\n   * of these events.\n   * @return {?}\n   */\n\n\n  updateStickyFooterRowStyles() {\n    /** @type {?} */\n    const footerRows = this._getRenderedRows(this._footerRowOutlet);\n\n    this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n    /** @type {?} */\n\n\n    const stickyStates = this._footerRowDefs.map(def => def.sticky);\n\n    this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n\n    this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates); // Reset the dirty state of the sticky input change since it has been used.\n\n\n    this._footerRowDefs.forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Updates the column sticky styles. First resets all applied styles with respect to the cells\n   * sticking to the left and right. Then sticky styles are added for the left and right according\n   * to the column definitions for each cell in each row. This is automatically called when\n   * the data source provides a new set of data or when a column definition changes its sticky\n   * input. May be called manually for cases where the cell content changes outside of these events.\n   * @return {?}\n   */\n\n\n  updateStickyColumnStyles() {\n    /** @type {?} */\n    const headerRows = this._getRenderedRows(this._headerRowOutlet);\n    /** @type {?} */\n\n\n    const dataRows = this._getRenderedRows(this._rowOutlet);\n    /** @type {?} */\n\n\n    const footerRows = this._getRenderedRows(this._footerRowOutlet); // Clear the left and right positioning from all columns in the table across all rows since\n    // sticky columns span across all table sections (header, data, footer)\n\n\n    this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']); // Update the sticky styles for each header row depending on the def's sticky state\n\n\n    headerRows.forEach((headerRow, i) => {\n      this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n    }); // Update the sticky styles for each data row depending on its def's sticky state\n\n    this._rowDefs.forEach(rowDef => {\n      /** @type {?} */\n      const rows = [];\n\n      for (let i = 0; i < dataRows.length; i++) {\n        if (this._renderRows[i].rowDef === rowDef) {\n          rows.push(dataRows[i]);\n        }\n      }\n\n      this._addStickyColumnStyles(rows, rowDef);\n    }); // Update the sticky styles for each footer row depending on the def's sticky state\n\n\n    footerRows.forEach((footerRow, i) => {\n      this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n    }); // Reset the dirty state of the sticky input change since it has been used.\n\n    Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n  }\n  /**\n   * Get the list of RenderRow objects to render according to the current list of data and defined\n   * row definitions. If the previous list already contained a particular pair, it should be reused\n   * so that the differ equates their references.\n   * @return {?}\n   */\n\n\n  _getAllRenderRows() {\n    /** @type {?} */\n    const renderRows = [];\n    /** @type {?} */\n\n    const prevCachedRenderRows = this._cachedRenderRowsMap;\n    this._cachedRenderRowsMap = new Map(); // For each data object, get the list of rows that should be rendered, represented by the\n    // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n\n    for (let i = 0; i < this._data.length; i++) {\n      /** @type {?} */\n      let data = this._data[i];\n      /** @type {?} */\n\n      const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n\n      if (!this._cachedRenderRowsMap.has(data)) {\n        this._cachedRenderRowsMap.set(data, new WeakMap());\n      }\n\n      for (let j = 0; j < renderRowsForData.length; j++) {\n        /** @type {?} */\n        let renderRow = renderRowsForData[j];\n        /** @type {?} */\n\n        const cache =\n        /** @type {?} */\n        this._cachedRenderRowsMap.get(renderRow.data);\n\n        if (cache.has(renderRow.rowDef)) {\n          /** @type {?} */\n          cache.get(renderRow.rowDef).push(renderRow);\n        } else {\n          cache.set(renderRow.rowDef, [renderRow]);\n        }\n\n        renderRows.push(renderRow);\n      }\n    }\n\n    return renderRows;\n  }\n  /**\n   * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n   * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n   * `(T, CdkRowDef)` pair.\n   * @param {?} data\n   * @param {?} dataIndex\n   * @param {?=} cache\n   * @return {?}\n   */\n\n\n  _getRenderRowsForData(data, dataIndex, cache) {\n    /** @type {?} */\n    const rowDefs = this._getRowDefs(data, dataIndex);\n\n    return rowDefs.map(rowDef => {\n      /** @type {?} */\n      const cachedRenderRows = cache && cache.has(rowDef) ?\n      /** @type {?} */\n      cache.get(rowDef) : [];\n\n      if (cachedRenderRows.length) {\n        /** @type {?} */\n        const dataRow =\n        /** @type {?} */\n        cachedRenderRows.shift();\n        dataRow.dataIndex = dataIndex;\n        return dataRow;\n      } else {\n        return {\n          data,\n          rowDef,\n          dataIndex\n        };\n      }\n    });\n  }\n  /**\n   * Update the map containing the content's column definitions.\n   * @return {?}\n   */\n\n\n  _cacheColumnDefs() {\n    this._columnDefsByName.clear();\n    /** @type {?} */\n\n\n    const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n    columnDefs.forEach(columnDef => {\n      if (this._columnDefsByName.has(columnDef.name)) {\n        throw getTableDuplicateColumnNameError(columnDef.name);\n      }\n\n      this._columnDefsByName.set(columnDef.name, columnDef);\n    });\n  }\n  /**\n   * Update the list of all available row definitions that can be used.\n   * @return {?}\n   */\n\n\n  _cacheRowDefs() {\n    this._headerRowDefs = mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n    this._footerRowDefs = mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n    this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n    /** @type {?} */\n\n    const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n\n    if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n      throw getTableMultipleDefaultRowDefsError();\n    }\n\n    this._defaultRowDef = defaultRowDefs[0];\n  }\n  /**\n   * Check if the header, data, or footer rows have changed what columns they want to display or\n   * whether the sticky states have changed for the header or footer. If there is a diff, then\n   * re-render that section.\n   * @return {?}\n   */\n\n\n  _renderUpdatedColumns() {\n    /** @type {?} */\n    const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff(); // Force re-render data rows if the list of column definitions have changed.\n\n\n    if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n      this._forceRenderDataRows();\n    } // Force re-render header/footer rows if the list of column definitions have changed..\n\n\n    if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n      this._forceRenderHeaderRows();\n    }\n\n    if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n      this._forceRenderFooterRows();\n    }\n  }\n  /**\n   * Switch to the provided data source by resetting the data and unsubscribing from the current\n   * render change subscription if one exists. If the data source is null, interpret this by\n   * clearing the row outlet. Otherwise start listening for new data.\n   * @param {?} dataSource\n   * @return {?}\n   */\n\n\n  _switchDataSource(dataSource) {\n    this._data = [];\n\n    if (this.dataSource instanceof DataSource) {\n      this.dataSource.disconnect(this);\n    } // Stop listening for data from the previous data source.\n\n\n    if (this._renderChangeSubscription) {\n      this._renderChangeSubscription.unsubscribe();\n\n      this._renderChangeSubscription = null;\n    }\n\n    if (!dataSource) {\n      if (this._dataDiffer) {\n        this._dataDiffer.diff([]);\n      }\n\n      this._rowOutlet.viewContainer.clear();\n    }\n\n    this._dataSource = dataSource;\n  }\n  /**\n   * Set up a subscription for the data provided by the data source.\n   * @return {?}\n   */\n\n\n  _observeRenderChanges() {\n    // If no data source has been set, there is nothing to observe for changes.\n    if (!this.dataSource) {\n      return;\n    }\n    /** @type {?} */\n\n\n    let dataStream; // Check if the datasource is a DataSource object by observing if it has a connect function.\n    // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it\n    // checked as an instanceof DataSource<T> since the table should allow for data sources\n    // that did not explicitly extend DataSource<T>.\n\n    if (\n    /** @type {?} */\n    this.dataSource.connect instanceof Function) {\n      dataStream =\n      /** @type {?} */\n      this.dataSource.connect(this);\n    } else if (this.dataSource instanceof Observable) {\n      dataStream = this.dataSource;\n    } else if (Array.isArray(this.dataSource)) {\n      dataStream = of(this.dataSource);\n    }\n\n    if (dataStream === undefined) {\n      throw getTableUnknownDataSourceError();\n    }\n\n    this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe(data => {\n      this._data = data || [];\n      this.renderRows();\n    });\n  }\n  /**\n   * Clears any existing content in the header row outlet and creates a new embedded view\n   * in the outlet using the header row definition.\n   * @return {?}\n   */\n\n\n  _forceRenderHeaderRows() {\n    // Clear the header row outlet if any content exists.\n    if (this._headerRowOutlet.viewContainer.length > 0) {\n      this._headerRowOutlet.viewContainer.clear();\n    }\n\n    this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n\n    this.updateStickyHeaderRowStyles();\n    this.updateStickyColumnStyles();\n  }\n  /**\n   * Clears any existing content in the footer row outlet and creates a new embedded view\n   * in the outlet using the footer row definition.\n   * @return {?}\n   */\n\n\n  _forceRenderFooterRows() {\n    // Clear the footer row outlet if any content exists.\n    if (this._footerRowOutlet.viewContainer.length > 0) {\n      this._footerRowOutlet.viewContainer.clear();\n    }\n\n    this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n\n    this.updateStickyFooterRowStyles();\n    this.updateStickyColumnStyles();\n  }\n  /**\n   * Adds the sticky column styles for the rows according to the columns' stick states.\n   * @param {?} rows\n   * @param {?} rowDef\n   * @return {?}\n   */\n\n\n  _addStickyColumnStyles(rows, rowDef) {\n    /** @type {?} */\n    const columnDefs = Array.from(rowDef.columns || []).map(c =>\n    /** @type {?} */\n    this._columnDefsByName.get(c));\n    /** @type {?} */\n\n    const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n    /** @type {?} */\n\n    const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n\n    this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n  }\n  /**\n   * Gets the list of rows that have been rendered in the row outlet.\n   * @param {?} rowOutlet\n   * @return {?}\n   */\n\n\n  _getRenderedRows(rowOutlet) {\n    /** @type {?} */\n    const renderedRows = [];\n\n    for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n      /** @type {?} */\n      const viewRef =\n      /** @type {?} */\n      rowOutlet.viewContainer.get(i);\n      renderedRows.push(viewRef.rootNodes[0]);\n    }\n\n    return renderedRows;\n  }\n  /**\n   * Get the matching row definitions that should be used for this row data. If there is only\n   * one row definition, it is returned. Otherwise, find the row definitions that has a when\n   * predicate that returns true with the data. If none return true, return the default row\n   * definition.\n   * @param {?} data\n   * @param {?} dataIndex\n   * @return {?}\n   */\n\n\n  _getRowDefs(data, dataIndex) {\n    if (this._rowDefs.length == 1) {\n      return [this._rowDefs[0]];\n    }\n    /** @type {?} */\n\n\n    let rowDefs = [];\n\n    if (this.multiTemplateDataRows) {\n      rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n    } else {\n      /** @type {?} */\n      let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n\n      if (rowDef) {\n        rowDefs.push(rowDef);\n      }\n    }\n\n    if (!rowDefs.length) {\n      throw getTableMissingMatchingRowDefError(data);\n    }\n\n    return rowDefs;\n  }\n  /**\n   * Create the embedded view for the data row template and place it in the correct index location\n   * within the data row view container.\n   * @param {?} renderRow\n   * @param {?} renderIndex\n   * @return {?}\n   */\n\n\n  _insertRow(renderRow, renderIndex) {\n    /** @type {?} */\n    const rowDef = renderRow.rowDef;\n    /** @type {?} */\n\n    const context = {\n      $implicit: renderRow.data\n    };\n\n    this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n  }\n  /**\n   * Creates a new row template in the outlet and fills it with the set of cell templates.\n   * Optionally takes a context to provide to the row and cells, as well as an optional index\n   * of where to place the new row template in the outlet.\n   * @param {?} outlet\n   * @param {?} rowDef\n   * @param {?} index\n   * @param {?=} context\n   * @return {?}\n   */\n\n\n  _renderRow(outlet, rowDef, index, context = {}) {\n    // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n    outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n\n    for (let cellTemplate of this._getCellTemplates(rowDef)) {\n      if (CdkCellOutlet.mostRecentCellOutlet) {\n        CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   * @return {?}\n   */\n\n\n  _updateRowIndexContext() {\n    /** @type {?} */\n    const viewContainer = this._rowOutlet.viewContainer;\n\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      /** @type {?} */\n      const viewRef =\n      /** @type {?} */\n      viewContainer.get(renderIndex);\n      /** @type {?} */\n\n      const context =\n      /** @type {?} */\n      viewRef.context;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n\n      if (this.multiTemplateDataRows) {\n        context.dataIndex = this._renderRows[renderIndex].dataIndex;\n        context.renderIndex = renderIndex;\n      } else {\n        context.index = this._renderRows[renderIndex].dataIndex;\n      }\n    }\n  }\n  /**\n   * Gets the column definitions for the provided row def.\n   * @param {?} rowDef\n   * @return {?}\n   */\n\n\n  _getCellTemplates(rowDef) {\n    if (!rowDef || !rowDef.columns) {\n      return [];\n    }\n\n    return Array.from(rowDef.columns, columnId => {\n      /** @type {?} */\n      const column = this._columnDefsByName.get(columnId);\n\n      if (!column) {\n        throw getTableUnknownColumnError(columnId);\n      }\n\n      return rowDef.extractCellTemplate(column);\n    });\n  }\n  /**\n   * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n   * @return {?}\n   */\n\n\n  _applyNativeTableSections() {\n    /** @type {?} */\n    const sections = [{\n      tag: 'thead',\n      outlet: this._headerRowOutlet\n    }, {\n      tag: 'tbody',\n      outlet: this._rowOutlet\n    }, {\n      tag: 'tfoot',\n      outlet: this._footerRowOutlet\n    }];\n\n    for (const section of sections) {\n      /** @type {?} */\n      const documentRef = this._document || document;\n      /** @type {?} */\n\n      const element = documentRef.createElement(section.tag);\n      element.appendChild(section.outlet.elementRef.nativeElement);\n\n      this._elementRef.nativeElement.appendChild(element);\n    }\n  }\n  /**\n   * Forces a re-render of the data rows. Should be called in cases where there has been an input\n   * change that affects the evaluation of which rows should be rendered, e.g. toggling\n   * `multiTemplateDataRows` or adding/removing row definitions.\n   * @return {?}\n   */\n\n\n  _forceRenderDataRows() {\n    this._dataDiffer.diff([]);\n\n    this._rowOutlet.viewContainer.clear();\n\n    this.renderRows();\n    this.updateStickyColumnStyles();\n  }\n  /**\n   * Checks if there has been a change in sticky states since last check and applies the correct\n   * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n   * during a change detection and after the inputs are settled (after content check).\n   * @return {?}\n   */\n\n\n  _checkStickyStates() {\n    /** @type {?} */\n    const stickyCheckReducer = (acc, d) => {\n      return acc || d.hasStickyChanged();\n    }; // Note that the check needs to occur for every definition since it notifies the definition\n    // that it can reset its dirty state. Using another operator like `some` may short-circuit\n    // remaining definitions and leave them in an unchecked state.\n\n\n    if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyHeaderRowStyles();\n    }\n\n    if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n      this.updateStickyFooterRowStyles();\n    }\n\n    if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n      this.updateStickyColumnStyles();\n    }\n  }\n  /**\n   * Creates the sticky styler that will be used for sticky rows and columns. Listens\n   * for directionality changes and provides the latest direction to the styler. Re-applies column\n   * stickiness when directionality changes.\n   * @return {?}\n   */\n\n\n  _setupStickyStyler() {\n    /** @type {?} */\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, // @breaking-change 8.0.0 remove the null check for `this._platform`.\n    this.stickyCssClass, direction, this._platform ? this._platform.isBrowser : true);\n    (this._dir ? this._dir.change : of()).pipe(takeUntil(this._onDestroy)).subscribe(value => {\n      this._stickyStyler.direction = value;\n      this.updateStickyColumnStyles();\n    });\n  }\n\n}\n\nCdkTable.ɵfac = function CdkTable_Factory(t) {\n  return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform));\n};\n\nCdkTable.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CdkTable,\n  selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]],\n  contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 4);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 4);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 4);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    }\n  },\n  viewQuery: function CdkTable_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(DataRowOutlet, 5);\n      ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 5);\n      ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n    }\n  },\n  hostAttrs: [1, \"cdk-table\"],\n  inputs: {\n    trackBy: \"trackBy\",\n    dataSource: \"dataSource\",\n    multiTemplateDataRows: \"multiTemplateDataRows\"\n  },\n  exportAs: [\"cdkTable\"],\n  decls: 3,\n  vars: 0,\n  consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n  template: function CdkTable_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0)(1, 1)(2, 2);\n    }\n  },\n  dependencies: [DataRowOutlet, HeaderRowOutlet, FooterRowOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n/** @nocollapse */\n\nCdkTable.ctorParameters = () => [{\n  type: IterableDiffers\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: ElementRef\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['role']\n  }]\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: Platform\n}];\n\nCdkTable.propDecorators = {\n  trackBy: [{\n    type: Input\n  }],\n  dataSource: [{\n    type: Input\n  }],\n  multiTemplateDataRows: [{\n    type: Input\n  }],\n  _rowOutlet: [{\n    type: ViewChild,\n    args: [DataRowOutlet]\n  }],\n  _headerRowOutlet: [{\n    type: ViewChild,\n    args: [HeaderRowOutlet]\n  }],\n  _footerRowOutlet: [{\n    type: ViewChild,\n    args: [FooterRowOutlet]\n  }],\n  _contentColumnDefs: [{\n    type: ContentChildren,\n    args: [CdkColumnDef]\n  }],\n  _contentRowDefs: [{\n    type: ContentChildren,\n    args: [CdkRowDef]\n  }],\n  _contentHeaderRowDefs: [{\n    type: ContentChildren,\n    args: [CdkHeaderRowDef]\n  }],\n  _contentFooterRowDefs: [{\n    type: ContentChildren,\n    args: [CdkFooterRowDef]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-table, table[cdk-table]',\n      exportAs: 'cdkTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'cdk-table'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['role']\n      }]\n    }, {\n      type: ɵngcc1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc2.Platform\n    }];\n  }, {\n    trackBy: [{\n      type: Input\n    }],\n    dataSource: [{\n      type: Input\n    }],\n    multiTemplateDataRows: [{\n      type: Input\n    }],\n    _rowOutlet: [{\n      type: ViewChild,\n      args: [DataRowOutlet]\n    }],\n    _headerRowOutlet: [{\n      type: ViewChild,\n      args: [HeaderRowOutlet]\n    }],\n    _footerRowOutlet: [{\n      type: ViewChild,\n      args: [FooterRowOutlet]\n    }],\n    _contentColumnDefs: [{\n      type: ContentChildren,\n      args: [CdkColumnDef]\n    }],\n    _contentRowDefs: [{\n      type: ContentChildren,\n      args: [CdkRowDef]\n    }],\n    _contentHeaderRowDefs: [{\n      type: ContentChildren,\n      args: [CdkHeaderRowDef]\n    }],\n    _contentFooterRowDefs: [{\n      type: ContentChildren,\n      args: [CdkFooterRowDef]\n    }]\n  });\n})();\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\n\n\nfunction mergeQueryListAndSet(queryList, set) {\n  return queryList.toArray().concat(Array.from(set));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst EXPORTED_DECLARATIONS = [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet];\n\nclass CdkTableModule {}\n\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) {\n  return new (t || CdkTableModule)();\n};\n\nCdkTableModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CdkTableModule\n});\nCdkTableModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: EXPORTED_DECLARATIONS,\n      declarations: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, {\n    declarations: function () {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDefBase, _CdkColumnDefBase, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDefBase, _CdkHeaderRowDefBase, CdkHeaderRowDef, CdkFooterRowDefBase, _CdkFooterRowDefBase, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput };","map":{"version":3,"names":["coerceBooleanProperty","ContentChild","Directive","ElementRef","Input","TemplateRef","ChangeDetectionStrategy","Component","IterableDiffers","ViewContainerRef","ViewEncapsulation","Attribute","ChangeDetectorRef","ContentChildren","isDevMode","Optional","ViewChild","Inject","NgModule","DataSource","ɵngcc0","ɵngcc1","ɵngcc2","DOCUMENT","CommonModule","BehaviorSubject","Observable","of","Subject","takeUntil","Directionality","Platform","mixinHasStickyInput","base","constructor","args","_sticky","_hasStickyChanged","sticky","v","prevValue","hasStickyChanged","resetStickyChanged","CdkCellDef","template","ɵfac","CdkCellDef_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","ngDevMode","ɵsetClassMetadata","selector","CdkHeaderCellDef","CdkHeaderCellDef_Factory","CdkFooterCellDef","CdkFooterCellDef_Factory","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","arguments","_stickyEnd","name","_name","cssClassFriendlyName","replace","stickyEnd","ɵCdkColumnDef_BaseFactory","CdkColumnDef_Factory","ɵɵgetInheritedFactory","contentQueries","CdkColumnDef_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","cell","first","headerCell","footerCell","inputs","features","ɵɵInheritDefinitionFeature","propDecorators","BaseCdkCell","columnDef","elementRef","columnClassName","nativeElement","classList","add","CdkHeaderCell","CdkHeaderCell_Factory","hostAttrs","host","CdkFooterCell","CdkFooterCell_Factory","CdkCell","CdkCell_Factory","CDK_ROW_TEMPLATE","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","BaseRowDef_Factory","ɵɵinvalidFactory","ɵɵNgOnChangesFeature","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","CdkHeaderRowDef_Factory","CdkFooterRowDefBase","_CdkFooterRowDefBase","CdkFooterRowDef_Factory","CdkRowDef","CdkRowDef_Factory","when","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","ngOnDestroy","CdkCellOutlet_Factory","CdkHeaderRow","CdkHeaderRow_Factory","ɵcmp","ɵɵdefineComponent","decls","vars","consts","CdkHeaderRow_Template","ɵɵelementContainer","dependencies","encapsulation","changeDetection","OnPush","None","CdkFooterRow","CdkFooterRow_Factory","CdkFooterRow_Template","CdkRow","CdkRow_Factory","CdkRow_Template","getTableUnknownColumnError","id","Error","getTableDuplicateColumnNameError","getTableMultipleDefaultRowDefsError","getTableMissingMatchingRowDefError","data","JSON","stringify","getTableMissingRowDefsError","getTableUnknownDataSourceError","STICKY_DIRECTIONS","StickyStyler","isNativeHtmlTable","stickCellCss","direction","_isBrowser","clearStickyPositioning","rows","stickyDirections","row","nodeType","ELEMENT_NODE","_removeStickyStyle","i","children","length","updateStickyColumns","stickyStartStates","stickyEndStates","hasStickyColumns","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","isRtl","_addStickyStyle","stickRows","rowsToStick","stickyStates","position","reverse","stickyHeight","rowIndex","j","getBoundingClientRect","height","updateStickyFooterContainer","tableElement","tfoot","querySelector","element","dir","style","zIndex","_getCalculatedZIndex","hasDirection","remove","dirValue","cssText","zIndexIncrements","top","bottom","left","right","firstRowCells","push","width","widths","positions","nextPosition","DataRowOutlet","viewContainer","DataRowOutlet_Factory","HeaderRowOutlet","HeaderRowOutlet_Factory","FooterRowOutlet","FooterRowOutlet_Factory","CDK_TABLE_TEMPLATE","CdkTable","_changeDetectorRef","_elementRef","role","_dir","_document","_platform","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","_multiTemplateDataRows","viewChange","start","end","Number","MAX_VALUE","setAttribute","_isNativeHtmlTable","nodeName","trackBy","_trackByFn","fn","console","warn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_rowOutlet","_forceRenderDataRows","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","dataIndex","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","_headerRowDefs","_footerRowDefs","_rowDefs","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","clear","_headerRowOutlet","_footerRowOutlet","next","complete","disconnect","renderRows","_renderRows","_getAllRenderRows","forEachOperation","record","prevIndex","currentIndex","previousIndex","_insertRow","item","view","get","move","_updateRowIndexContext","forEachIdentityChange","rowView","context","$implicit","updateStickyColumnStyles","setHeaderRowDef","headerRowDef","setFooterRowDef","footerRowDef","addColumnDef","removeColumnDef","delete","addRowDef","rowDef","removeRowDef","addHeaderRowDef","removeHeaderRowDef","addFooterRowDef","removeFooterRowDef","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","_stickyStyler","map","def","forEach","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","Array","from","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","columnDefs","mergeQueryListAndSet","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","_defaultRowDef","columnsDiffReducer","acc","reduce","unsubscribe","dataStream","connect","Function","isArray","undefined","pipe","subscribe","_renderRow","c","rowOutlet","renderedRows","viewRef","rootNodes","renderIndex","outlet","index","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","count","last","even","odd","columnId","sections","tag","section","documentRef","document","createElement","appendChild","stickyCheckReducer","d","value","isBrowser","change","CdkTable_Factory","ɵɵinjectAttribute","CdkTable_ContentQueries","viewQuery","CdkTable_Query","ɵɵviewQuery","exportAs","CdkTable_Template","String","decorators","queryList","toArray","concat","EXPORTED_DECLARATIONS","CdkTableModule","CdkTableModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/duel-zone/Web/ClientApp/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/table.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, isDevMode, Optional, ViewChild, Inject, NgModule } from '@angular/core';\nimport { DataSource } from '@angular/cdk/collections';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /**\n         * @param {...?} args\n         */\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            this._hasStickyChanged = false;\n        }\n        /**\n         * Whether sticky positioning should be applied.\n         * @return {?}\n         */\n        get sticky() { return this._sticky; }\n        /**\n         * @param {?} v\n         * @return {?}\n         */\n        set sticky(v) {\n            /** @type {?} */\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        hasStickyChanged() {\n            /** @type {?} */\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = function CdkCellDef_Factory(t) { return new (t || CdkCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellDef, selectors: [[\"\", \"cdkCellDef\", \"\"]] });\n/** @nocollapse */\nCdkCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = function CdkHeaderCellDef_Factory(t) { return new (t || CdkHeaderCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkHeaderCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCellDef, selectors: [[\"\", \"cdkHeaderCellDef\", \"\"]] });\n/** @nocollapse */\nCdkHeaderCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkHeaderCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = function CdkFooterCellDef_Factory(t) { return new (t || CdkFooterCellDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkFooterCellDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCellDef, selectors: [[\"\", \"cdkFooterCellDef\", \"\"]] });\n/** @nocollapse */\nCdkFooterCellDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCellDef, [{\n        type: Directive,\n        args: [{ selector: '[cdkFooterCellDef]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/**\n * \\@docs-private\n */\nclass CdkColumnDefBase {\n}\n/** @type {?} */\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor() {\n        super(...arguments);\n        this._stickyEnd = false;\n    }\n    /**\n     * Unique name for this column.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    set name(name) {\n        // If the directive is set without a name (updated programatically), then this setter will\n        // trigger with an empty string and should not overwrite the programatically set value.\n        if (!name) {\n            return;\n        }\n        this._name = name;\n        this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     * @return {?}\n     */\n    get stickyEnd() { return this._stickyEnd; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set stickyEnd(v) {\n        /** @type {?} */\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n}\nCdkColumnDef.ɵfac = /*@__PURE__*/ function () { let ɵCdkColumnDef_BaseFactory; return function CdkColumnDef_Factory(t) { return (ɵCdkColumnDef_BaseFactory || (ɵCdkColumnDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(CdkColumnDef)))(t || CdkColumnDef); }; }();\nCdkColumnDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkColumnDef, selectors: [[\"\", \"cdkColumnDef\", \"\"]], contentQueries: function CdkColumnDef_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderCellDef, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterCellDef, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerCell = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerCell = _t.first);\n    } }, inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkColumnDef.propDecorators = {\n    name: [{ type: Input, args: ['cdkColumnDef',] }],\n    stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n    cell: [{ type: ContentChild, args: [CdkCellDef,] }],\n    headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef,] }],\n    footerCell: [{ type: ContentChild, args: [CdkFooterCellDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkColumnDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkColumnDef]',\n                inputs: ['sticky']\n            }]\n    }], null, { name: [{\n            type: Input,\n            args: ['cdkColumnDef']\n        }], stickyEnd: [{\n            type: Input,\n            args: ['stickyEnd']\n        }], cell: [{\n            type: ContentChild,\n            args: [CdkCellDef]\n        }], headerCell: [{\n            type: ContentChild,\n            args: [CdkHeaderCellDef]\n        }], footerCell: [{\n            type: ContentChild,\n            args: [CdkFooterCellDef]\n        }] }); })();\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nclass BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        /** @type {?} */\n        const columnClassName = `cdk-column-${columnDef.cssClassFriendlyName}`;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n}\n/**\n * Header cell template container that adds the right classes and role.\n */\nclass CdkHeaderCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = function CdkHeaderCell_Factory(t) { return new (t || CdkHeaderCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkHeaderCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderCell, selectors: [[\"cdk-header-cell\"], [\"th\", \"cdk-header-cell\", \"\"]], hostAttrs: [\"role\", \"columnheader\", 1, \"cdk-header-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkHeaderCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-header-cell, th[cdk-header-cell]',\n                host: {\n                    'class': 'cdk-header-cell',\n                    'role': 'columnheader'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Footer cell template container that adds the right classes and role.\n */\nclass CdkFooterCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkFooterCell.ɵfac = function CdkFooterCell_Factory(t) { return new (t || CdkFooterCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkFooterCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterCell, selectors: [[\"cdk-footer-cell\"], [\"td\", \"cdk-footer-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-footer-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkFooterCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                host: {\n                    'class': 'cdk-footer-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Cell template container that adds the right classes and role.\n */\nclass CdkCell extends BaseCdkCell {\n    /**\n     * @param {?} columnDef\n     * @param {?} elementRef\n     */\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkCell.ɵfac = function CdkCell_Factory(t) { return new (t || CdkCell)(ɵngcc0.ɵɵdirectiveInject(CdkColumnDef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkCell.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCell, selectors: [[\"cdk-cell\"], [\"td\", \"cdk-cell\", \"\"]], hostAttrs: [\"role\", \"gridcell\", 1, \"cdk-cell\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkCell.ctorParameters = () => [\n    { type: CdkColumnDef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCell, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-cell, td[cdk-cell]',\n                host: {\n                    'class': 'cdk-cell',\n                    'role': 'gridcell'\n                }\n            }]\n    }], function () { return [{ type: CdkColumnDef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n  @type {?} */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nclass BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = function BaseRowDef_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };\nBaseRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BaseRowDef, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n\n/**\n * \\@docs-private\n */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = function CdkHeaderRowDef_Factory(t) { return new (t || CdkHeaderRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkHeaderRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkHeaderRowDef, selectors: [[\"\", \"cdkHeaderRowDef\", \"\"]], inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkHeaderRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkHeaderRowDef]',\n                inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n/**\n * \\@docs-private\n */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\n/** @type {?} */\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = function CdkFooterRowDef_Factory(t) { return new (t || CdkFooterRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkFooterRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkFooterRowDef, selectors: [[\"\", \"cdkFooterRowDef\", \"\"]], inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkFooterRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkFooterRowDef]',\n                inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nclass CdkRowDef extends BaseRowDef {\n    /**\n     * @param {?} template\n     * @param {?} _differs\n     */\n    constructor(template, _differs) {\n        super(template, _differs);\n    }\n}\nCdkRowDef.ɵfac = function CdkRowDef_Factory(t) { return new (t || CdkRowDef)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers)); };\nCdkRowDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkRowDef, selectors: [[\"\", \"cdkRowDef\", \"\"]], inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nCdkRowDef.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: IterableDiffers }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRowDef, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkRowDef]',\n                inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen']\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }]; }, null); })();\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * @param {?} _viewContainer\n     */\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\nCdkCellOutlet.ɵfac = function CdkCellOutlet_Factory(t) { return new (t || CdkCellOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkCellOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkCellOutlet, selectors: [[\"\", \"cdkCellOutlet\", \"\"]] });\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\n/** @nocollapse */\nCdkCellOutlet.ctorParameters = () => [\n    { type: ViewContainerRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkCellOutlet, [{\n        type: Directive,\n        args: [{ selector: '[cdkCellOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = function CdkHeaderRow_Factory(t) { return new (t || CdkHeaderRow)(); };\nCdkHeaderRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkHeaderRow, selectors: [[\"cdk-header-row\"], [\"tr\", \"cdk-header-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-header-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkHeaderRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkHeaderRow, [{\n        type: Component,\n        args: [{ selector: 'cdk-header-row, tr[cdk-header-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-header-row',\n                    'role': 'row'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], null, null); })();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = function CdkFooterRow_Factory(t) { return new (t || CdkFooterRow)(); };\nCdkFooterRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkFooterRow, selectors: [[\"cdk-footer-row\"], [\"tr\", \"cdk-footer-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-footer-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkFooterRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkFooterRow, [{\n        type: Component,\n        args: [{ selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-footer-row',\n                    'role': 'row'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], null, null); })();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nclass CdkRow {\n}\nCdkRow.ɵfac = function CdkRow_Factory(t) { return new (t || CdkRow)(); };\nCdkRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkRow, selectors: [[\"cdk-row\"], [\"tr\", \"cdk-row\", \"\"]], hostAttrs: [\"role\", \"row\", 1, \"cdk-row\"], decls: 1, vars: 0, consts: [[\"cdkCellOutlet\", \"\"]], template: function CdkRow_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkRow, [{\n        type: Component,\n        args: [{ selector: 'cdk-row, tr[cdk-row]',\n                template: CDK_ROW_TEMPLATE,\n                host: {\n                    'class': 'cdk-row',\n                    'role': 'row'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n  @type {?} */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nclass StickyStyler {\n    /**\n     * @param {?} isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param {?} stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param {?} direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param {?=} _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    constructor(isNativeHtmlTable, stickCellCss, direction, _isBrowser = true) {\n        this.isNativeHtmlTable = isNativeHtmlTable;\n        this.stickCellCss = stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (let i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                const cell = /** @type {?} */ (row.children[i]);\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        const hasStickyColumns = stickyStartStates.some(state => state) || stickyEndStates.some(state => state);\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const firstRow = rows[0];\n        /** @type {?} */\n        const numCells = firstRow.children.length;\n        /** @type {?} */\n        const cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        const isRtl = this.direction === 'rtl';\n        for (const row of rows) {\n            for (let i = 0; i < numCells; i++) {\n                /** @type {?} */\n                const cell = /** @type {?} */ (row.children[i]);\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        const rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        let stickyHeight = 0;\n        for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            const row = rows[rowIndex];\n            if (this.isNativeHtmlTable) {\n                for (let j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    const cell = /** @type {?} */ (row.children[j]);\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this.isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        const tfoot = /** @type {?} */ ((tableElement.querySelector('tfoot')));\n        if (stickyStates.some(state => !state)) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        /** @type {?} */\n        const hasDirection = STICKY_DIRECTIONS.some(dir => !!element.style[dir]);\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this.stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    _addStickyStyle(element, dir, dirValue) {\n        element.classList.add(this.stickCellCss);\n        element.style[dir] = `${dirValue}px`;\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    _getCalculatedZIndex(element) {\n        /** @type {?} */\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        let zIndex = 0;\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    _getCellWidths(row) {\n        /** @type {?} */\n        const cellWidths = [];\n        /** @type {?} */\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            let cell = /** @type {?} */ (firstRowCells[i]);\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        /** @type {?} */\n        const positions = [];\n        /** @type {?} */\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nclass DataRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = function DataRowOutlet_Factory(t) { return new (t || DataRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDataRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DataRowOutlet, selectors: [[\"\", \"rowOutlet\", \"\"]] });\n/** @nocollapse */\nDataRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DataRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[rowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nclass HeaderRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = function HeaderRowOutlet_Factory(t) { return new (t || HeaderRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nHeaderRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: HeaderRowOutlet, selectors: [[\"\", \"headerRowOutlet\", \"\"]] });\n/** @nocollapse */\nHeaderRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HeaderRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[headerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nclass FooterRowOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?} elementRef\n     */\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = function FooterRowOutlet_Factory(t) { return new (t || FooterRowOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nFooterRowOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FooterRowOutlet, selectors: [[\"\", \"footerRowOutlet\", \"\"]] });\n/** @nocollapse */\nFooterRowOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FooterRowOutlet, [{\n        type: Directive,\n        args: [{ selector: '[footerRowOutlet]' }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ElementRef }]; }, null); })();\n/** *\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n  @type {?} */\nconst CDK_TABLE_TEMPLATE = `\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>`;\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nclass CdkTable {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     * @param {?} _elementRef\n     * @param {?} role\n     * @param {?} _dir\n     * @param {?=} _document\n     * @param {?=} _platform\n     */\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, /**\n                   * @deprecated\n                   * @breaking-change 8.0.0 `_document` and `_platform` to\n                   *    be made into a required parameters.\n                   */\n    _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *it's* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *it's* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *it's* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *it's* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @return {?}\n     */\n    get trackBy() { return this._trackByFn; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set trackBy(fn) {\n        if (isDevMode() &&\n            fn != null && typeof fn !== 'function' && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     * @return {?}\n     */\n    get dataSource() { return this._dataSource; }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     * @return {?}\n     */\n    get multiTemplateDataRows() { return this._multiTemplateDataRows; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        if (this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this.dataSource instanceof DataSource) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((record, prevIndex, currentIndex) => {\n            if (record.previousIndex == null) {\n                this._insertRow(record.item, /** @type {?} */ ((currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove(/** @type {?} */ ((prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                const view = /** @type {?} */ (viewContainer.get(/** @type {?} */ ((prevIndex))));\n                viewContainer.move(/** @type {?} */ ((view)), currentIndex);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            /** @type {?} */\n            const rowView = /** @type {?} */ (viewContainer.get(/** @type {?} */ ((record.currentIndex))));\n            rowView.context.$implicit = record.item.data;\n        });\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    setHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    setFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyHeaderRowStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        /** @type {?} */\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    updateStickyFooterRowStyles() {\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        /** @type {?} */\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    updateStickyColumnStyles() {\n        /** @type {?} */\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            /** @type {?} */\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @return {?}\n     */\n    _getAllRenderRows() {\n        /** @type {?} */\n        const renderRows = [];\n        /** @type {?} */\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            let data = this._data[i];\n            /** @type {?} */\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                let renderRow = renderRowsForData[j];\n                /** @type {?} */\n                const cache = /** @type {?} */ ((this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    /** @type {?} */ ((cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        /** @type {?} */\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            /** @type {?} */\n            const cachedRenderRows = (cache && cache.has(rowDef)) ? /** @type {?} */ ((cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                const dataRow = /** @type {?} */ ((cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /**\n     * Update the map containing the content's column definitions.\n     * @return {?}\n     */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        const columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @return {?}\n     */\n    _cacheRowDefs() {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs =\n            mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        /** @type {?} */\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @return {?}\n     */\n    _renderUpdatedColumns() {\n        /** @type {?} */\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (this.dataSource instanceof DataSource) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        let dataStream;\n        // Check if the datasource is a DataSource object by observing if it has a connect function.\n        // Cannot check this.dataSource['connect'] due to potential property renaming, nor can it\n        // checked as an instanceof DataSource<T> since the table should allow for data sources\n        // that did not explicitly extend DataSource<T>.\n        if ((/** @type {?} */ (this.dataSource)).connect instanceof Function) {\n            dataStream = (/** @type {?} */ (this.dataSource)).connect(this);\n        }\n        else if (this.dataSource instanceof Observable) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @return {?}\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @return {?}\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _addStickyColumnStyles(rows, rowDef) {\n        /** @type {?} */\n        const columnDefs = Array.from(rowDef.columns || []).map(c => /** @type {?} */ ((this._columnDefsByName.get(c))));\n        /** @type {?} */\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        /** @type {?} */\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    }\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    _getRenderedRows(rowOutlet) {\n        /** @type {?} */\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (((rowOutlet.viewContainer.get(i)))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            /** @type {?} */\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    _insertRow(renderRow, renderIndex) {\n        /** @type {?} */\n        const rowDef = renderRow.rowDef;\n        /** @type {?} */\n        const context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @return {?}\n     */\n    _updateRowIndexContext() {\n        /** @type {?} */\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            const viewRef = /** @type {?} */ (viewContainer.get(renderIndex));\n            /** @type {?} */\n            const context = /** @type {?} */ (viewRef.context);\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /**\n     * Gets the column definitions for the provided row def.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            /** @type {?} */\n            const column = this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @return {?}\n     */\n    _applyNativeTableSections() {\n        /** @type {?} */\n        const sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (const section of sections) {\n            /** @type {?} */\n            const documentRef = this._document || document;\n            /** @type {?} */\n            const element = documentRef.createElement(section.tag);\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            this._elementRef.nativeElement.appendChild(element);\n        }\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @return {?}\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @return {?}\n     */\n    _checkStickyStates() {\n        /** @type {?} */\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @return {?}\n     */\n    _setupStickyStyler() {\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, \n        // @breaking-change 8.0.0 remove the null check for `this._platform`.\n        this.stickyCssClass, direction, this._platform ? this._platform.isBrowser : true);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n}\nCdkTable.ɵfac = function CdkTable_Factory(t) { return new (t || CdkTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('role'), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Platform)); };\nCdkTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CdkTable, selectors: [[\"cdk-table\"], [\"table\", \"cdk-table\", \"\"]], contentQueries: function CdkTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkColumnDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkRowDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkHeaderRowDef, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkFooterRowDef, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentColumnDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentHeaderRowDefs = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._contentFooterRowDefs = _t);\n    } }, viewQuery: function CdkTable_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DataRowOutlet, 5);\n        ɵngcc0.ɵɵviewQuery(HeaderRowOutlet, 5);\n        ɵngcc0.ɵɵviewQuery(FooterRowOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._rowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerRowOutlet = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._footerRowOutlet = _t.first);\n    } }, hostAttrs: [1, \"cdk-table\"], inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\" }, exportAs: [\"cdkTable\"], decls: 3, vars: 0, consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]], template: function CdkTable_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0)(1, 1)(2, 2);\n    } }, dependencies: [DataRowOutlet, HeaderRowOutlet, FooterRowOutlet], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nCdkTable.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\nCdkTable.propDecorators = {\n    trackBy: [{ type: Input }],\n    dataSource: [{ type: Input }],\n    multiTemplateDataRows: [{ type: Input }],\n    _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet,] }],\n    _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet,] }],\n    _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet,] }],\n    _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef,] }],\n    _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef,] }],\n    _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef,] }],\n    _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTable, [{\n        type: Component,\n        args: [{ selector: 'cdk-table, table[cdk-table]',\n                exportAs: 'cdkTable',\n                template: CDK_TABLE_TEMPLATE,\n                host: {\n                    'class': 'cdk-table'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush }]\n    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['role']\n            }] }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, { trackBy: [{\n            type: Input\n        }], dataSource: [{\n            type: Input\n        }], multiTemplateDataRows: [{\n            type: Input\n        }], _rowOutlet: [{\n            type: ViewChild,\n            args: [DataRowOutlet]\n        }], _headerRowOutlet: [{\n            type: ViewChild,\n            args: [HeaderRowOutlet]\n        }], _footerRowOutlet: [{\n            type: ViewChild,\n            args: [FooterRowOutlet]\n        }], _contentColumnDefs: [{\n            type: ContentChildren,\n            args: [CdkColumnDef]\n        }], _contentRowDefs: [{\n            type: ContentChildren,\n            args: [CdkRowDef]\n        }], _contentHeaderRowDefs: [{\n            type: ContentChildren,\n            args: [CdkHeaderRowDef]\n        }], _contentFooterRowDefs: [{\n            type: ContentChildren,\n            args: [CdkFooterRowDef]\n        }] }); })();\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n    return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵfac = function CdkTableModule_Factory(t) { return new (t || CdkTableModule)(); };\nCdkTableModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkTableModule });\nCdkTableModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTableModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableModule, { declarations: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDefBase, _CdkColumnDefBase, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDefBase, _CdkHeaderRowDefBase, CdkHeaderRowDef, CdkFooterRowDefBase, _CdkFooterRowDefBase, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}