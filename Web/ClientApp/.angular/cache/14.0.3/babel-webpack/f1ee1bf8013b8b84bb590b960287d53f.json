{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nclass MutationObserverFactory {\n  /**\n   * @param {?} callback\n   * @return {?}\n   */\n  create(callback) {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n\n}\n\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {\n  return new (t || MutationObserverFactory)();\n};\n\nMutationObserverFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MutationObserverFactory,\n  factory: MutationObserverFactory.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nMutationObserverFactory.ngInjectableDef = defineInjectable({\n  factory: function MutationObserverFactory_Factory() {\n    return new MutationObserverFactory();\n  },\n  token: MutationObserverFactory,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * An injectable service that allows watching elements for changes to their content.\n */\n\n\nclass ContentObserver {\n  /**\n   * @param {?} _mutationObserverFactory\n   */\n  constructor(_mutationObserverFactory) {\n    this._mutationObserverFactory = _mutationObserverFactory;\n    /**\n     * Keeps track of the existing MutationObservers so they can be reused.\n     */\n\n    this._observedElements = new Map();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n  /**\n   * @param {?} elementOrRef\n   * @return {?}\n   */\n\n\n  observe(elementOrRef) {\n    /** @type {?} */\n    const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n    return Observable.create(observer => {\n      /** @type {?} */\n      const stream = this._observeElement(element);\n      /** @type {?} */\n\n\n      const subscription = stream.subscribe(observer);\n      return () => {\n        subscription.unsubscribe();\n\n        this._unobserveElement(element);\n      };\n    });\n  }\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _observeElement(element) {\n    if (!this._observedElements.has(element)) {\n      /** @type {?} */\n      const stream = new Subject();\n      /** @type {?} */\n\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n\n      this._observedElements.set(element, {\n        observer,\n        stream,\n        count: 1\n      });\n    } else {\n      /** @type {?} */\n      this._observedElements.get(element).count++;\n    }\n\n    return (\n      /** @type {?} */\n      this._observedElements.get(element).stream\n    );\n  }\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _unobserveElement(element) {\n    if (this._observedElements.has(element)) {\n      /** @type {?} */\n      this._observedElements.get(element).count--;\n\n      if (!\n      /** @type {?} */\n      this._observedElements.get(element).count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n  /**\n   * Clean up the underlying MutationObserver for the specified element.\n   * @param {?} element\n   * @return {?}\n   */\n\n\n  _cleanupObserver(element) {\n    if (this._observedElements.has(element)) {\n      const {\n        observer,\n        stream\n      } =\n      /** @type {?} */\n      this._observedElements.get(element);\n\n      if (observer) {\n        observer.disconnect();\n      }\n\n      stream.complete();\n\n      this._observedElements.delete(element);\n    }\n  }\n\n}\n\nContentObserver.ɵfac = function ContentObserver_Factory(t) {\n  return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory));\n};\n\nContentObserver.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ContentObserver,\n  factory: ContentObserver.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nContentObserver.ctorParameters = () => [{\n  type: MutationObserverFactory\n}];\n/** @nocollapse */\n\n\nContentObserver.ngInjectableDef = defineInjectable({\n  factory: function ContentObserver_Factory() {\n    return new ContentObserver(inject(MutationObserverFactory));\n  },\n  token: ContentObserver,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MutationObserverFactory\n    }];\n  }, null);\n})();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n\n\nclass CdkObserveContent {\n  /**\n   * @param {?} _contentObserver\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   */\n  constructor(_contentObserver, _elementRef, _ngZone) {\n    this._contentObserver = _contentObserver;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /**\n     * Event emitted for each change in the element's content.\n     */\n\n    this.event = new EventEmitter();\n    this._disabled = false;\n    this._currentSubscription = null;\n  }\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   * @return {?}\n   */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  /**\n   * Debounce interval for emitting the changes.\n   * @return {?}\n   */\n\n\n  get debounce() {\n    return this._debounce;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set debounce(value) {\n    this._debounce = coerceNumberProperty(value);\n\n    this._subscribe();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _subscribe() {\n    this._unsubscribe();\n    /** @type {?} */\n\n\n    const stream = this._contentObserver.observe(this._elementRef); // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n\n\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _unsubscribe() {\n    if (this._currentSubscription) {\n      this._currentSubscription.unsubscribe();\n    }\n  }\n\n}\n\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {\n  return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkObserveContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkObserveContent,\n  selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n  inputs: {\n    disabled: [\"cdkObserveContentDisabled\", \"disabled\"],\n    debounce: \"debounce\"\n  },\n  outputs: {\n    event: \"cdkObserveContent\"\n  },\n  exportAs: [\"cdkObserveContent\"]\n});\n/** @nocollapse */\n\nCdkObserveContent.ctorParameters = () => [{\n  type: ContentObserver\n}, {\n  type: ElementRef\n}, {\n  type: NgZone\n}];\n\nCdkObserveContent.propDecorators = {\n  event: [{\n    type: Output,\n    args: ['cdkObserveContent']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['cdkObserveContentDisabled']\n  }],\n  debounce: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkObserveContent]',\n      exportAs: 'cdkObserveContent'\n    }]\n  }], function () {\n    return [{\n      type: ContentObserver\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    event: [{\n      type: Output,\n      args: ['cdkObserveContent']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkObserveContentDisabled']\n    }],\n    debounce: [{\n      type: Input\n    }]\n  });\n})();\n\nclass ObserversModule {}\n\nObserversModule.ɵfac = function ObserversModule_Factory(t) {\n  return new (t || ObserversModule)();\n};\n\nObserversModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ObserversModule\n});\nObserversModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MutationObserverFactory]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkObserveContent],\n      declarations: [CdkObserveContent],\n      providers: [MutationObserverFactory]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, {\n    declarations: [CdkObserveContent],\n    exports: [CdkObserveContent]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n\nexport { MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule };","map":{"version":3,"names":["coerceBooleanProperty","coerceNumberProperty","Directive","ElementRef","EventEmitter","Injectable","Input","NgModule","NgZone","Output","defineInjectable","inject","Observable","Subject","debounceTime","ɵngcc0","MutationObserverFactory","create","callback","MutationObserver","ɵfac","MutationObserverFactory_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngInjectableDef","ngDevMode","ɵsetClassMetadata","type","args","ContentObserver","constructor","_mutationObserverFactory","_observedElements","Map","ngOnDestroy","forEach","_","element","_cleanupObserver","observe","elementOrRef","nativeElement","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","mutations","next","characterData","childList","subtree","set","count","get","disconnect","complete","delete","ContentObserver_Factory","ɵɵinject","ctorParameters","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","_disabled","_currentSubscription","disabled","value","_unsubscribe","_subscribe","debounce","_debounce","ngAfterContentInit","runOutsideAngular","pipe","CdkObserveContent_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","outputs","exportAs","propDecorators","selector","ObserversModule","ObserversModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/duel-zone/Web/ClientApp/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/observers.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nclass MutationObserverFactory {\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    create(callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n}\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) { return new (t || MutationObserverFactory)(); };\nMutationObserverFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MutationObserverFactory, factory: MutationObserverFactory.ɵfac, providedIn: 'root' });\n/** @nocollapse */ MutationObserverFactory.ngInjectableDef = defineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n/**\n * An injectable service that allows watching elements for changes to their content.\n */\nclass ContentObserver {\n    /**\n     * @param {?} _mutationObserverFactory\n     */\n    constructor(_mutationObserverFactory) {\n        this._mutationObserverFactory = _mutationObserverFactory;\n        /**\n         * Keeps track of the existing MutationObservers so they can be reused.\n         */\n        this._observedElements = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    observe(elementOrRef) {\n        /** @type {?} */\n        const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n        return Observable.create((observer) => {\n            /** @type {?} */\n            const stream = this._observeElement(element);\n            /** @type {?} */\n            const subscription = stream.subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                this._unobserveElement(element);\n            };\n        });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     * @param {?} element\n     * @return {?}\n     */\n    _observeElement(element) {\n        if (!this._observedElements.has(element)) {\n            /** @type {?} */\n            const stream = new Subject();\n            /** @type {?} */\n            const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n            if (observer) {\n                observer.observe(element, {\n                    characterData: true,\n                    childList: true,\n                    subtree: true\n                });\n            }\n            this._observedElements.set(element, { observer, stream, count: 1 });\n        }\n        else {\n            /** @type {?} */ ((this._observedElements.get(element))).count++;\n        }\n        return /** @type {?} */ ((this._observedElements.get(element))).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     * @param {?} element\n     * @return {?}\n     */\n    _unobserveElement(element) {\n        if (this._observedElements.has(element)) {\n            /** @type {?} */ ((this._observedElements.get(element))).count--;\n            if (!/** @type {?} */ ((this._observedElements.get(element))).count) {\n                this._cleanupObserver(element);\n            }\n        }\n    }\n    /**\n     * Clean up the underlying MutationObserver for the specified element.\n     * @param {?} element\n     * @return {?}\n     */\n    _cleanupObserver(element) {\n        if (this._observedElements.has(element)) {\n            const { observer, stream } = /** @type {?} */ ((this._observedElements.get(element)));\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this._observedElements.delete(element);\n        }\n    }\n}\nContentObserver.ɵfac = function ContentObserver_Factory(t) { return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory)); };\nContentObserver.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ContentObserver, factory: ContentObserver.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nContentObserver.ctorParameters = () => [\n    { type: MutationObserverFactory }\n];\n/** @nocollapse */ ContentObserver.ngInjectableDef = defineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(inject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MutationObserverFactory }]; }, null); })();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n    /**\n     * @param {?} _contentObserver\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     */\n    constructor(_contentObserver, _elementRef, _ngZone) {\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * Event emitted for each change in the element's content.\n         */\n        this.event = new EventEmitter();\n        this._disabled = false;\n        this._currentSubscription = null;\n    }\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /**\n     * Debounce interval for emitting the changes.\n     * @return {?}\n     */\n    get debounce() { return this._debounce; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set debounce(value) {\n        this._debounce = coerceNumberProperty(value);\n        this._subscribe();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        if (!this._currentSubscription && !this.disabled) {\n            this._subscribe();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n    _subscribe() {\n        this._unsubscribe();\n        /** @type {?} */\n        const stream = this._contentObserver.observe(this._elementRef);\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n        // Consider brining it back inside the zone next time we're making breaking changes.\n        // Bringing it back inside can cause things like infinite change detection loops and changed\n        // after checked errors if people's code isn't handling it properly.\n        this._ngZone.runOutsideAngular(() => {\n            this._currentSubscription =\n                (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _unsubscribe() {\n        if (this._currentSubscription) {\n            this._currentSubscription.unsubscribe();\n        }\n    }\n}\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) { return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkObserveContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkObserveContent, selectors: [[\"\", \"cdkObserveContent\", \"\"]], inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"] });\n/** @nocollapse */\nCdkObserveContent.ctorParameters = () => [\n    { type: ContentObserver },\n    { type: ElementRef },\n    { type: NgZone }\n];\nCdkObserveContent.propDecorators = {\n    event: [{ type: Output, args: ['cdkObserveContent',] }],\n    disabled: [{ type: Input, args: ['cdkObserveContentDisabled',] }],\n    debounce: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkObserveContent]',\n                exportAs: 'cdkObserveContent'\n            }]\n    }], function () { return [{ type: ContentObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { event: [{\n            type: Output,\n            args: ['cdkObserveContent']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkObserveContentDisabled']\n        }], debounce: [{\n            type: Input\n        }] }); })();\nclass ObserversModule {\n}\nObserversModule.ɵfac = function ObserversModule_Factory(t) { return new (t || ObserversModule)(); };\nObserversModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ObserversModule });\nObserversModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MutationObserverFactory] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkObserveContent],\n                declarations: [CdkObserveContent],\n                providers: [MutationObserverFactory]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, { declarations: [CdkObserveContent], exports: [CdkObserveContent] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}