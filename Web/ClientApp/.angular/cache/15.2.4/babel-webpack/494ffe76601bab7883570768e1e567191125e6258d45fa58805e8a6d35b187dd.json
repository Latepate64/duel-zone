{"ast":null,"code":"import { from } from '../observable/from';\nimport { take } from '../operators/take';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n  const {\n    connector = () => new Subject(),\n    resetOnError = true,\n    resetOnComplete = true,\n    resetOnRefCountZero = true\n  } = options;\n  return wrapperSource => {\n    let connection = null;\n    let resetConnection = null;\n    let subject = null;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n    const cancelReset = () => {\n      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n      resetConnection = null;\n    };\n    const reset = () => {\n      cancelReset();\n      connection = subject = null;\n      hasCompleted = hasErrored = false;\n    };\n    const resetAndUnsubscribe = () => {\n      const conn = connection;\n      reset();\n      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n    };\n    return operate((source, subscriber) => {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n      const dest = subject = subject !== null && subject !== void 0 ? subject : connector();\n      subscriber.add(() => {\n        refCount--;\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n      dest.subscribe(subscriber);\n      if (!connection) {\n        connection = new SafeSubscriber({\n          next: value => dest.next(value),\n          error: err => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          }\n        });\n        from(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\nfunction handleReset(reset, on, ...args) {\n  if (on === true) {\n    reset();\n    return null;\n  }\n  if (on === false) {\n    return null;\n  }\n  return on(...args).pipe(take(1)).subscribe(() => reset());\n}","map":{"version":3,"names":["from","take","Subject","SafeSubscriber","operate","share","options","connector","resetOnError","resetOnComplete","resetOnRefCountZero","wrapperSource","connection","resetConnection","subject","refCount","hasCompleted","hasErrored","cancelReset","unsubscribe","reset","resetAndUnsubscribe","conn","source","subscriber","dest","add","handleReset","subscribe","next","value","error","err","complete","on","args","pipe"],"sources":["C:/duel-zone/Web/ClientApp/node_modules/rxjs/dist/esm/internal/operators/share.js"],"sourcesContent":["import { from } from '../observable/from';\nimport { take } from '../operators/take';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection = null;\n        let resetConnection = null;\n        let subject = null;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = null;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = null;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                from(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return null;\n    }\n    if (on === false) {\n        return null;\n    }\n    return on(...args)\n        .pipe(take(1))\n        .subscribe(() => reset());\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}