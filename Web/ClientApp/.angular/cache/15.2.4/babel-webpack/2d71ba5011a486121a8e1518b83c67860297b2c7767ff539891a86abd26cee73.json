{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, QueryList, Directive, ElementRef, Input, NgZone, InjectionToken, EventEmitter, Output, NgModule, defineInjectable, inject } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap, take } from 'rxjs/operators';\nimport { Platform, supportsPassiveEventListeners, PlatformModule } from '@angular/cdk/platform';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * IDs are deliminated by an empty space, as per the spec.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction addAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  const ids = getAriaReferenceIds(el, attr);\n  if (ids.some(existingId => existingId.trim() == id.trim())) {\n    return;\n  }\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction removeAriaReferencedId(el, attr, id) {\n  /** @type {?} */\n  const ids = getAriaReferenceIds(el, attr);\n  /** @type {?} */\n  const filteredIds = ids.filter(val => val != id.trim());\n  el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace deliminated) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * ID used for the body container where all messages are appended.\n  @type {?} */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** *\n * ID prefix used for each created message element.\n  @type {?} */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** *\n * Attribute given to each host element that is described by a message element.\n  @type {?} */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** *\n * Global incremental identifier for each registered message element.\n  @type {?} */\nlet nextId = 0;\n/** *\n * Global map of all registered message elements that have been placed into the document.\n  @type {?} */\nconst messageRegistry = new Map();\n/** *\n * Container for all registered messages.\n  @type {?} */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * \\@docs-private\n */\nclass AriaDescriber {\n  /**\n   * @param {?} _document\n   */\n  constructor(_document) {\n    this._document = _document;\n  }\n  /**\n   * Adds to the host element an aria-describedby reference to a hidden element that contains\n   * the message. If the same message has already been registered, then it will reuse the created\n   * message element.\n   * @param {?} hostElement\n   * @param {?} message\n   * @return {?}\n   */\n  describe(hostElement, message) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n    if (!messageRegistry.has(message)) {\n      this._createMessageElement(message);\n    }\n    if (!this._isElementDescribedByMessage(hostElement, message)) {\n      this._addMessageReference(hostElement, message);\n    }\n  }\n  /**\n   * Removes the host element's aria-describedby reference to the message element.\n   * @param {?} hostElement\n   * @param {?} message\n   * @return {?}\n   */\n  removeDescription(hostElement, message) {\n    if (!this._canBeDescribed(hostElement, message)) {\n      return;\n    }\n    if (this._isElementDescribedByMessage(hostElement, message)) {\n      this._removeMessageReference(hostElement, message);\n    }\n    /** @type {?} */\n    const registeredMessage = messageRegistry.get(message);\n    if (registeredMessage && registeredMessage.referenceCount === 0) {\n      this._deleteMessageElement(message);\n    }\n    if (messagesContainer && messagesContainer.childNodes.length === 0) {\n      this._deleteMessagesContainer();\n    }\n  }\n  /**\n   * Unregisters all created message elements and removes the message container.\n   * @return {?}\n   */\n  ngOnDestroy() {\n    /** @type {?} */\n    const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n    for (let i = 0; i < describedElements.length; i++) {\n      this._removeCdkDescribedByReferenceIds(describedElements[i]);\n      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    if (messagesContainer) {\n      this._deleteMessagesContainer();\n    }\n    messageRegistry.clear();\n  }\n  /**\n   * Creates a new element in the visually hidden message container element with the message\n   * as its content and adds it to the message registry.\n   * @param {?} message\n   * @return {?}\n   */\n  _createMessageElement(message) {\n    /** @type {?} */\n    const messageElement = this._document.createElement('div');\n    messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n    messageElement.appendChild( /** @type {?} */this._document.createTextNode(message));\n    this._createMessagesContainer(); /** @type {?} */\n    messagesContainer.appendChild(messageElement);\n    messageRegistry.set(message, {\n      messageElement,\n      referenceCount: 0\n    });\n  }\n  /**\n   * Deletes the message element from the global messages container.\n   * @param {?} message\n   * @return {?}\n   */\n  _deleteMessageElement(message) {\n    /** @type {?} */\n    const registeredMessage = messageRegistry.get(message);\n    /** @type {?} */\n    const messageElement = registeredMessage && registeredMessage.messageElement;\n    if (messagesContainer && messageElement) {\n      messagesContainer.removeChild(messageElement);\n    }\n    messageRegistry.delete(message);\n  }\n  /**\n   * Creates the global container for all aria-describedby messages.\n   * @return {?}\n   */\n  _createMessagesContainer() {\n    if (!messagesContainer) {\n      /** @type {?} */\n      const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n      // When going from the server to the client, we may end up in a situation where there's\n      // already a container on the page, but we don't have a reference to it. Clear the\n      // old container so we don't get duplicates. Doing this, instead of emptying the previous\n      // container, should be slightly faster.\n      if (preExistingContainer) {\n        /** @type {?} */preExistingContainer.parentNode.removeChild(preExistingContainer);\n      }\n      messagesContainer = this._document.createElement('div');\n      messagesContainer.id = MESSAGES_CONTAINER_ID;\n      messagesContainer.setAttribute('aria-hidden', 'true');\n      messagesContainer.style.display = 'none';\n      this._document.body.appendChild(messagesContainer);\n    }\n  }\n  /**\n   * Deletes the global messages container.\n   * @return {?}\n   */\n  _deleteMessagesContainer() {\n    if (messagesContainer && messagesContainer.parentNode) {\n      messagesContainer.parentNode.removeChild(messagesContainer);\n      messagesContainer = null;\n    }\n  }\n  /**\n   * Removes all cdk-describedby messages that are hosted through the element.\n   * @param {?} element\n   * @return {?}\n   */\n  _removeCdkDescribedByReferenceIds(element) {\n    /** @type {?} */\n    const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n    element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n  }\n  /**\n   * Adds a message reference to the element using aria-describedby and increments the registered\n   * message's reference count.\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n  _addMessageReference(element, message) {\n    /** @type {?} */\n    const registeredMessage = /** @type {?} */messageRegistry.get(message);\n    // Add the aria-describedby reference and set the\n    // describedby_host attribute to mark the element.\n    addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n    registeredMessage.referenceCount++;\n  }\n  /**\n   * Removes a message reference from the element using aria-describedby\n   * and decrements the registered message's reference count.\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n  _removeMessageReference(element, message) {\n    /** @type {?} */\n    const registeredMessage = /** @type {?} */messageRegistry.get(message);\n    registeredMessage.referenceCount--;\n    removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n  }\n  /**\n   * Returns true if the element has been described by the provided message ID.\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n  _isElementDescribedByMessage(element, message) {\n    /** @type {?} */\n    const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n    /** @type {?} */\n    const registeredMessage = messageRegistry.get(message);\n    /** @type {?} */\n    const messageId = registeredMessage && registeredMessage.messageElement.id;\n    return !!messageId && referenceIds.indexOf(messageId) != -1;\n  }\n  /**\n   * Determines whether a message can be described on a particular element.\n   * @param {?} element\n   * @param {?} message\n   * @return {?}\n   */\n  _canBeDescribed(element, message) {\n    return element.nodeType === this._document.ELEMENT_NODE && message != null && !!`${message}`.trim();\n  }\n}\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n  return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\nAriaDescriber.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: AriaDescriber,\n  factory: AriaDescriber.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nAriaDescriber.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\nAriaDescriber.ngInjectableDef = defineInjectable({\n  factory: function AriaDescriber_Factory() {\n    return new AriaDescriber(inject(DOCUMENT));\n  },\n  token: AriaDescriber,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {\n  return parentDispatcher || new AriaDescriber(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst ARIA_DESCRIBER_PROVIDER = {\n  // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n  provide: AriaDescriber,\n  deps: [[new Optional(), new SkipSelf(), AriaDescriber], /** @type {?} */DOCUMENT],\n  useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// unsupported: template constraints.\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\nclass ListKeyManager {\n  /**\n   * @param {?} _items\n   */\n  constructor(_items) {\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    /**\n     * Predicate function that can be used to check whether an item should be skipped\n     * by the key manager. By default, disabled items are skipped.\n     */\n    this._skipPredicateFn = item => item.disabled;\n    this._pressedLetters = [];\n    /**\n     * Stream that emits any time the TAB key is pressed, so components can react\n     * when focus is shifted off of the list.\n     */\n    this.tabOut = new Subject();\n    /**\n     * Stream that emits whenever the active item of the list manager changes.\n     */\n    this.change = new Subject();\n    // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(newItems => {\n        if (this._activeItem) {\n          /** @type {?} */\n          const itemArray = newItems.toArray();\n          /** @type {?} */\n          const newIndex = itemArray.indexOf(this._activeItem);\n          if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n            this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Sets the predicate function that determines which items should be skipped by the\n   * list key manager.\n   * @param {?} predicate Function that determines whether the given item should be skipped.\n   * @return {?}\n   */\n  skipPredicate(predicate) {\n    this._skipPredicateFn = predicate;\n    return this;\n  }\n  /**\n   * Configures wrapping mode, which determines whether the active item will wrap to\n   * the other end of list when there are no more items in the given direction.\n   * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n   * @return {?}\n   */\n  withWrap(shouldWrap = true) {\n    this._wrap = shouldWrap;\n    return this;\n  }\n  /**\n   * Configures whether the key manager should be able to move the selection vertically.\n   * @param {?=} enabled Whether vertical selection should be enabled.\n   * @return {?}\n   */\n  withVerticalOrientation(enabled = true) {\n    this._vertical = enabled;\n    return this;\n  }\n  /**\n   * Configures the key manager to move the selection horizontally.\n   * Passing in `null` will disable horizontal movement.\n   * @param {?} direction Direction in which the selection can be moved.\n   * @return {?}\n   */\n  withHorizontalOrientation(direction) {\n    this._horizontal = direction;\n    return this;\n  }\n  /**\n   * Turns on typeahead mode which allows users to set the active item by typing.\n   * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n   * @return {?}\n   */\n  withTypeAhead(debounceInterval = 200) {\n    if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n      throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n    }\n    this._typeaheadSubscription.unsubscribe();\n    // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n    // and convert those letters back into a string. Afterwards find the first item that starts\n    // with that string and select it.\n    this._typeaheadSubscription = this._letterKeyStream.pipe(tap(keyCode => this._pressedLetters.push(keyCode)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n      /** @type {?} */\n      const items = this._getItemsArray();\n      // Start at 1 because we want to start searching at the item immediately\n      // following the current active item.\n      for (let i = 1; i < items.length + 1; i++) {\n        /** @type {?} */\n        const index = (this._activeItemIndex + i) % items.length;\n        /** @type {?} */\n        const item = items[index];\n        if (!this._skipPredicateFn(item) && /** @type {?} */item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n          this.setActiveItem(index);\n          break;\n        }\n      }\n      this._pressedLetters = [];\n    });\n    return this;\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n  setActiveItem(item) {\n    /** @type {?} */\n    const previousIndex = this._activeItemIndex;\n    this.updateActiveItem(item);\n    if (this._activeItemIndex !== previousIndex) {\n      this.change.next(this._activeItemIndex);\n    }\n  }\n  /**\n   * Sets the active item depending on the key event passed in.\n   * @param {?} event Keyboard event to be used for determining which element should be active.\n   * @return {?}\n   */\n  onKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    switch (keyCode) {\n      case TAB:\n        this.tabOut.next();\n        return;\n      case DOWN_ARROW:\n        if (this._vertical) {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      case UP_ARROW:\n        if (this._vertical) {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      case RIGHT_ARROW:\n        if (this._horizontal === 'ltr') {\n          this.setNextItemActive();\n          break;\n        } else if (this._horizontal === 'rtl') {\n          this.setPreviousItemActive();\n          break;\n        } else {\n          return;\n        }\n      case LEFT_ARROW:\n        if (this._horizontal === 'ltr') {\n          this.setPreviousItemActive();\n          break;\n        } else if (this._horizontal === 'rtl') {\n          this.setNextItemActive();\n          break;\n        } else {\n          return;\n        }\n      default:\n        // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n        // otherwise fall back to resolving alphanumeric characters via the keyCode.\n        if (event.key && event.key.length === 1) {\n          this._letterKeyStream.next(event.key.toLocaleUpperCase());\n        } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n          this._letterKeyStream.next(String.fromCharCode(keyCode));\n        }\n        // Note that we return here, in order to avoid preventing\n        // the default action of non-navigational keys.\n        return;\n    }\n    this._pressedLetters = [];\n    event.preventDefault();\n  }\n  /**\n   * Index of the currently active item.\n   * @return {?}\n   */\n  get activeItemIndex() {\n    return this._activeItemIndex;\n  }\n  /**\n   * The active item.\n   * @return {?}\n   */\n  get activeItem() {\n    return this._activeItem;\n  }\n  /**\n   * Sets the active item to the first enabled item in the list.\n   * @return {?}\n   */\n  setFirstItemActive() {\n    this._setActiveItemByIndex(0, 1);\n  }\n  /**\n   * Sets the active item to the last enabled item in the list.\n   * @return {?}\n   */\n  setLastItemActive() {\n    this._setActiveItemByIndex(this._items.length - 1, -1);\n  }\n  /**\n   * Sets the active item to the next enabled item in the list.\n   * @return {?}\n   */\n  setNextItemActive() {\n    this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n  }\n  /**\n   * Sets the active item to a previous enabled item in the list.\n   * @return {?}\n   */\n  setPreviousItemActive() {\n    this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n  updateActiveItem(item) {\n    /** @type {?} */\n    const itemArray = this._getItemsArray();\n    /** @type {?} */\n    const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n    this._activeItemIndex = index;\n    this._activeItem = itemArray[index];\n  }\n  /**\n   * Allows setting of the activeItemIndex without any other effects.\n   * @deprecated Use `updateActiveItem` instead.\n   * \\@breaking-change 8.0.0\n   * @param {?} index The new activeItemIndex.\n   * @return {?}\n   */\n  updateActiveItemIndex(index) {\n    this.updateActiveItem(index);\n  }\n  /**\n   * This method sets the active item, given a list of items and the delta between the\n   * currently active item and the new active item. It will calculate differently\n   * depending on whether wrap mode is turned on.\n   * @param {?} delta\n   * @return {?}\n   */\n  _setActiveItemByDelta(delta) {\n    this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n  }\n  /**\n   * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n   * down the list until it finds an item that is not disabled, and it will wrap if it\n   * encounters either end of the list.\n   * @param {?} delta\n   * @return {?}\n   */\n  _setActiveInWrapMode(delta) {\n    /** @type {?} */\n    const items = this._getItemsArray();\n    for (let i = 1; i <= items.length; i++) {\n      /** @type {?} */\n      const index = (this._activeItemIndex + delta * i + items.length) % items.length;\n      /** @type {?} */\n      const item = items[index];\n      if (!this._skipPredicateFn(item)) {\n        this.setActiveItem(index);\n        return;\n      }\n    }\n  }\n  /**\n   * Sets the active item properly given the default mode. In other words, it will\n   * continue to move down the list until it finds an item that is not disabled. If\n   * it encounters either end of the list, it will stop and not wrap.\n   * @param {?} delta\n   * @return {?}\n   */\n  _setActiveInDefaultMode(delta) {\n    this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n  }\n  /**\n   * Sets the active item to the first enabled item starting at the index specified. If the\n   * item is disabled, it will move in the fallbackDelta direction until it either\n   * finds an enabled item or encounters the end of the list.\n   * @param {?} index\n   * @param {?} fallbackDelta\n   * @return {?}\n   */\n  _setActiveItemByIndex(index, fallbackDelta) {\n    /** @type {?} */\n    const items = this._getItemsArray();\n    if (!items[index]) {\n      return;\n    }\n    while (this._skipPredicateFn(items[index])) {\n      index += fallbackDelta;\n      if (!items[index]) {\n        return;\n      }\n    }\n    this.setActiveItem(index);\n  }\n  /**\n   * Returns the items as an array.\n   * @return {?}\n   */\n  _getItemsArray() {\n    return this._items instanceof QueryList ? this._items.toArray() : this._items;\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n  /**\n   * @param {?} index\n   * @return {?}\n   */\n  setActiveItem(index) {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass FocusKeyManager extends ListKeyManager {\n  constructor() {\n    super(...arguments);\n    this._origin = 'program';\n  }\n  /**\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n   * @param {?} origin Focus origin to be used when focusing items.\n   * @return {?}\n   */\n  setFocusOrigin(origin) {\n    this._origin = origin;\n    return this;\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n  setActiveItem(item) {\n    super.setActiveItem(item);\n    if (this.activeItem) {\n      this.activeItem.focus(this._origin);\n    }\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n  /**\n   * @param {?} _platform\n   */\n  constructor(_platform) {\n    this._platform = _platform;\n  }\n  /**\n   * Gets whether an element is disabled.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is disabled.\n   */\n  isDisabled(element) {\n    // This does not capture some cases, such as a non-form control with a disabled attribute or\n    // a form control inside of a disabled form, but should capture the most common cases.\n    return element.hasAttribute('disabled');\n  }\n  /**\n   * Gets whether an element is visible for the purposes of interactivity.\n   *\n   * This will capture states like `display: none` and `visibility: hidden`, but not things like\n   * being clipped by an `overflow: hidden` parent or being outside the viewport.\n   *\n   * @param {?} element\n   * @return {?} Whether the element is visible.\n   */\n  isVisible(element) {\n    return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n  }\n  /**\n   * Gets whether an element can be reached via Tab key.\n   * Assumes that the element has already been checked with isFocusable.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is tabbable.\n   */\n  isTabbable(element) {\n    // Nothing is tabbable on the the server 😎\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n    /** @type {?} */\n    const frameElement = getFrameElement(getWindow(element));\n    if (frameElement) {\n      /** @type {?} */\n      const frameType = frameElement && frameElement.nodeName.toLowerCase();\n      // Frame elements inherit their tabindex onto all child elements.\n      if (getTabIndexValue(frameElement) === -1) {\n        return false;\n      }\n      // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n        return false;\n      }\n      // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n      if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n        return false;\n      }\n    }\n    /** @type {?} */\n    let nodeName = element.nodeName.toLowerCase();\n    /** @type {?} */\n    let tabIndexValue = getTabIndexValue(element);\n    if (element.hasAttribute('contenteditable')) {\n      return tabIndexValue !== -1;\n    }\n    if (nodeName === 'iframe') {\n      // The frames may be tabbable depending on content, but it's not possibly to reliably\n      // investigate the content of the frames.\n      return false;\n    }\n    if (nodeName === 'audio') {\n      if (!element.hasAttribute('controls')) {\n        // By default an <audio> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK) {\n        // In Blink <audio controls> elements are always tabbable.\n        return true;\n      }\n    }\n    if (nodeName === 'video') {\n      if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n        // In Trident a <video> element without the controls enabled is not tabbable.\n        return false;\n      } else if (this._platform.BLINK || this._platform.FIREFOX) {\n        // In Chrome and Firefox <video controls> elements are always tabbable.\n        return true;\n      }\n    }\n    if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n      // In all Blink and WebKit based browsers <object> elements are never tabbable.\n      return false;\n    }\n    // In iOS the browser only considers some specific elements as tabbable.\n    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n      return false;\n    }\n    return element.tabIndex >= 0;\n  }\n  /**\n   * Gets whether an element can be focused by the user.\n   *\n   * @param {?} element Element to be checked.\n   * @return {?} Whether the element is focusable.\n   */\n  isFocusable(element) {\n    // Perform checks in order of left to most expensive.\n    // Again, naive approach that does not capture many edge cases and browser quirks.\n    return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n  }\n}\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\nInteractivityChecker.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: InteractivityChecker,\n  factory: InteractivityChecker.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nInteractivityChecker.ctorParameters = () => [{\n  type: Platform\n}];\n/** @nocollapse */\nInteractivityChecker.ngInjectableDef = defineInjectable({\n  factory: function InteractivityChecker_Factory() {\n    return new InteractivityChecker(inject(Platform));\n  },\n  token: InteractivityChecker,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\nfunction getFrameElement(window) {\n  try {\n    return (/** @type {?} */window.frameElement\n    );\n  } catch (e) {\n    return null;\n  }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element) {\n  /** @type {?} */\n  let nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n  /** @type {?} */\n  let tabIndex = element.getAttribute('tabindex');\n  // IE11 parses tabindex=\"\" as the value \"-32768\"\n  if (tabIndex == '-32768') {\n    return false;\n  }\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  }\n  /** @type {?} */\n  const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element) {\n  /** @type {?} */\n  let nodeName = element.nodeName.toLowerCase();\n  /** @type {?} */\n  let inputType = nodeName === 'input' && /** @type {?} */element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\nclass FocusTrap {\n  /**\n   * @param {?} _element\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   * @param {?=} deferAnchors\n   */\n  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false;\n    this._enabled = true;\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set enabled(value) {\n    this._enabled = value;\n    if (this._startAnchor && this._endAnchor) {\n      this._toggleAnchorTabIndex(value, this._startAnchor);\n      this._toggleAnchorTabIndex(value, this._endAnchor);\n    }\n  }\n  /**\n   * Destroys the focus trap by cleaning up the anchors.\n   * @return {?}\n   */\n  destroy() {\n    if (this._startAnchor && this._startAnchor.parentNode) {\n      this._startAnchor.parentNode.removeChild(this._startAnchor);\n    }\n    if (this._endAnchor && this._endAnchor.parentNode) {\n      this._endAnchor.parentNode.removeChild(this._endAnchor);\n    }\n    this._startAnchor = this._endAnchor = null;\n  }\n  /**\n   * Inserts the anchors into the DOM. This is usually done automatically\n   * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n   * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n   * if the target element isn't currently in the DOM.\n   */\n  attachAnchors() {\n    // If we're not on the browser, there can be no focus to trap.\n    if (this._hasAttached) {\n      return true;\n    }\n    this._ngZone.runOutsideAngular(() => {\n      if (!this._startAnchor) {\n        this._startAnchor = this._createAnchor(); /** @type {?} */\n        this._startAnchor.addEventListener('focus', () => this.focusLastTabbableElement());\n      }\n      if (!this._endAnchor) {\n        this._endAnchor = this._createAnchor(); /** @type {?} */\n        this._endAnchor.addEventListener('focus', () => this.focusFirstTabbableElement());\n      }\n    });\n    if (this._element.parentNode) {\n      this._element.parentNode.insertBefore( /** @type {?} */this._startAnchor, this._element);\n      this._element.parentNode.insertBefore( /** @type {?} */this._endAnchor, this._element.nextSibling);\n      this._hasAttached = true;\n    }\n    return this._hasAttached;\n  }\n  /**\n   * Waits for the zone to stabilize, then either focuses the first element that the\n   * user specified, or the first tabbable element.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusInitialElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusInitialElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the first tabbable element within the focus trap region.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusFirstTabbableElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n    });\n  }\n  /**\n   * Waits for the zone to stabilize, then focuses\n   * the last tabbable element within the focus trap region.\n   * @return {?} Returns a promise that resolves with a boolean, depending\n   * on whether focus was moved successfuly.\n   */\n  focusLastTabbableElementWhenReady() {\n    return new Promise(resolve => {\n      this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n    });\n  }\n  /**\n   * Get the specified boundary element of the trapped region.\n   * @param {?} bound The boundary to get (start or end of trapped region).\n   * @return {?} The boundary element.\n   */\n  _getRegionBoundary(bound) {\n    /** @type {?} */\n    let markers = /** @type {?} */this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` + `[cdkFocusRegion${bound}], ` + `[cdk-focus-${bound}]`);\n    for (let i = 0; i < markers.length; i++) {\n      // @breaking-change 8.0.0\n      if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated ` + `attribute will be removed in 8.0.0.`, markers[i]);\n      } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` + `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` + `will be removed in 8.0.0.`, markers[i]);\n      }\n    }\n    if (bound == 'start') {\n      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n    }\n    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n  }\n  /**\n   * Focuses the element that should be focused when the focus trap is initialized.\n   * @return {?} Whether focus was moved successfuly.\n   */\n  focusInitialElement() {\n    /** @type {?} */\n    const redirectToElement = /** @type {?} */this._element.querySelector(`[cdk-focus-initial], ` + `[cdkFocusInitial]`);\n    if (redirectToElement) {\n      // @breaking-change 8.0.0\n      if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` + `use 'cdkFocusInitial' instead. The deprecated attribute ` + `will be removed in 8.0.0`, redirectToElement);\n      }\n      redirectToElement.focus();\n      return true;\n    }\n    return this.focusFirstTabbableElement();\n  }\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   * @return {?} Whether focus was moved successfuly.\n   */\n  focusFirstTabbableElement() {\n    /** @type {?} */\n    const redirectToElement = this._getRegionBoundary('start');\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n    return !!redirectToElement;\n  }\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   * @return {?} Whether focus was moved successfuly.\n   */\n  focusLastTabbableElement() {\n    /** @type {?} */\n    const redirectToElement = this._getRegionBoundary('end');\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n    return !!redirectToElement;\n  }\n  /**\n   * Checks whether the focus trap has successfuly been attached.\n   * @return {?}\n   */\n  hasAttached() {\n    return this._hasAttached;\n  }\n  /**\n   * Get the first tabbable element from a DOM subtree (inclusive).\n   * @param {?} root\n   * @return {?}\n   */\n  _getFirstTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    /** @type {?} */\n    let children = root.children || root.childNodes;\n    for (let i = 0; i < children.length; i++) {\n      /** @type {?} */\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement( /** @type {?} */children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /**\n   * Get the last tabbable element from a DOM subtree (inclusive).\n   * @param {?} root\n   * @return {?}\n   */\n  _getLastTabbableElement(root) {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n    /** @type {?} */\n    let children = root.children || root.childNodes;\n    for (let i = children.length - 1; i >= 0; i--) {\n      /** @type {?} */\n      let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement( /** @type {?} */children[i]) : null;\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n    return null;\n  }\n  /**\n   * Creates an anchor element.\n   * @return {?}\n   */\n  _createAnchor() {\n    /** @type {?} */\n    const anchor = this._document.createElement('div');\n    this._toggleAnchorTabIndex(this._enabled, anchor);\n    anchor.classList.add('cdk-visually-hidden');\n    anchor.classList.add('cdk-focus-trap-anchor');\n    return anchor;\n  }\n  /**\n   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n   * @param {?} isEnabled Whether the focus trap is enabled.\n   * @param {?} anchor Anchor on which to toggle the tabindex.\n   * @return {?}\n   */\n  _toggleAnchorTabIndex(isEnabled, anchor) {\n    // Remove the tabindex completely, rather than setting it to -1, because if the\n    // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n    isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n  }\n  /**\n   * Executes a function when the zone is stable.\n   * @param {?} fn\n   * @return {?}\n   */\n  _executeOnStable(fn) {\n    if (this._ngZone.isStable) {\n      fn();\n    } else {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n    }\n  }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nclass FocusTrapFactory {\n  /**\n   * @param {?} _checker\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  constructor(_checker, _ngZone, _document) {\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\n   * Creates a focus-trapped region around the given element.\n   * @param {?} element The element around which focus will be trapped.\n   * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n   *     manually by the user.\n   * @return {?} The created focus trap instance.\n   */\n  create(element, deferCaptureElements = false) {\n    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n  }\n}\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\nFocusTrapFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FocusTrapFactory,\n  factory: FocusTrapFactory.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nFocusTrapFactory.ctorParameters = () => [{\n  type: InteractivityChecker\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\nFocusTrapFactory.ngInjectableDef = defineInjectable({\n  factory: function FocusTrapFactory_Factory() {\n    return new FocusTrapFactory(inject(InteractivityChecker), inject(NgZone), inject(DOCUMENT));\n  },\n  token: FocusTrapFactory,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Directive for trapping focus within a region.\n */\nclass CdkTrapFocus {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusTrapFactory\n   * @param {?} _document\n   */\n  constructor(_elementRef, _focusTrapFactory, _document) {\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /**\n     * Previously focused element to restore focus to upon destroy when using autoCapture.\n     */\n    this._previouslyFocusedElement = null;\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /**\n   * Whether the focus trap is active.\n   * @return {?}\n   */\n  get enabled() {\n    return this.focusTrap.enabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set enabled(value) {\n    this.focusTrap.enabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether the directive should automatially move focus into the trapped region upon\n   * initialization and return focus to the previous activeElement upon destruction.\n   * @return {?}\n   */\n  get autoCapture() {\n    return this._autoCapture;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set autoCapture(value) {\n    this._autoCapture = coerceBooleanProperty(value);\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this.focusTrap.destroy();\n    // If we stored a previously focused element when using autoCapture, return focus to that\n    // element now that the trapped region is being destroyed.\n    if (this._previouslyFocusedElement) {\n      this._previouslyFocusedElement.focus();\n      this._previouslyFocusedElement = null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this.focusTrap.attachAnchors();\n    if (this.autoCapture) {\n      this._previouslyFocusedElement = /** @type {?} */this._document.activeElement;\n      this.focusTrap.focusInitialElementWhenReady();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    if (!this.focusTrap.hasAttached()) {\n      this.focusTrap.attachAnchors();\n    }\n  }\n}\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n  return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\nCdkTrapFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTrapFocus,\n  selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n  inputs: {\n    enabled: [\"cdkTrapFocus\", \"enabled\"],\n    autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n  },\n  exportAs: [\"cdkTrapFocus\"]\n});\n/** @nocollapse */\nCdkTrapFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusTrapFactory\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\nCdkTrapFocus.propDecorators = {\n  enabled: [{\n    type: Input,\n    args: ['cdkTrapFocus']\n  }],\n  autoCapture: [{\n    type: Input,\n    args: ['cdkTrapFocusAutoCapture']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTrapFocus]',\n      exportAs: 'cdkTrapFocus'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    enabled: [{\n      type: Input,\n      args: ['cdkTrapFocus']\n    }],\n    autoCapture: [{\n      type: Input,\n      args: ['cdkTrapFocusAutoCapture']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass LiveAnnouncer {\n  /**\n   * @param {?} elementToken\n   * @param {?} _ngZone\n   * @param {?} _document\n   */\n  constructor(elementToken, _ngZone, _document) {\n    this._ngZone = _ngZone;\n    // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n  /**\n   * Announces a message to screenreaders.\n   * @param {?} message Message to be announced to the screenreader\n   * @param {?=} politeness The politeness of the announcer element\n   * @return {?} Promise that will be resolved when the message is added to the DOM.\n   */\n  announce(message, politeness = 'polite') {\n    this._liveElement.textContent = '';\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          this._liveElement.textContent = message;\n          resolve();\n        }, 100);\n      });\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _createLiveElement() {\n    /** @type {?} */\n    const elementClass = 'cdk-live-announcer-element';\n    /** @type {?} */\n    const previousElements = this._document.getElementsByClassName(elementClass);\n    /** @type {?} */\n    const liveEl = this._document.createElement('div');\n    // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n    for (let i = 0; i < previousElements.length; i++) {\n      /** @type {?} */previousElements[i].parentNode.removeChild(previousElements[i]);\n    }\n    liveEl.classList.add(elementClass);\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n    this._document.body.appendChild(liveEl);\n    return liveEl;\n  }\n}\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n  return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\nLiveAnnouncer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: LiveAnnouncer,\n  factory: LiveAnnouncer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nLiveAnnouncer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n/** @nocollapse */\nLiveAnnouncer.ngInjectableDef = defineInjectable({\n  factory: function LiveAnnouncer_Factory() {\n    return new LiveAnnouncer(inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), inject(NgZone), inject(DOCUMENT));\n  },\n  token: LiveAnnouncer,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _liveAnnouncer\n   * @param {?} _contentObserver\n   * @param {?} _ngZone\n   */\n  constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n    this._elementRef = _elementRef;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._contentObserver = _contentObserver;\n    this._ngZone = _ngZone;\n    this._politeness = 'off';\n  }\n  /**\n   * The aria-live politeness level to use when announcing messages.\n   * @return {?}\n   */\n  get politeness() {\n    return this._politeness;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set politeness(value) {\n    this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n    if (this._politeness === 'off') {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n        this._subscription = null;\n      }\n    } else if (!this._subscription) {\n      this._subscription = this._ngZone.runOutsideAngular(() => {\n        return this._contentObserver.observe(this._elementRef).subscribe(() => {\n          /** @type {?} */\n          const element = this._elementRef.nativeElement;\n          this._liveAnnouncer.announce(element.textContent, this._politeness);\n        });\n      });\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  }\n}\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n  return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\nCdkAriaLive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAriaLive,\n  selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n  inputs: {\n    politeness: [\"cdkAriaLive\", \"politeness\"]\n  },\n  exportAs: [\"cdkAriaLive\"]\n});\n/** @nocollapse */\nCdkAriaLive.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: LiveAnnouncer\n}, {\n  type: ContentObserver\n}, {\n  type: NgZone\n}];\nCdkAriaLive.propDecorators = {\n  politeness: [{\n    type: Input,\n    args: ['cdkAriaLive']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAriaLive]',\n      exportAs: 'cdkAriaLive'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: LiveAnnouncer\n    }, {\n      type: ɵngcc2.ContentObserver\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    politeness: [{\n      type: Input,\n      args: ['cdkAriaLive']\n    }]\n  });\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} _document\n * @param {?} ngZone\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher, liveElement, _document, ngZone) {\n  return parentDispatcher || new LiveAnnouncer(liveElement, _document, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [[new Optional(), new SkipSelf(), LiveAnnouncer], [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)], DOCUMENT, NgZone],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nclass FocusMonitor {\n  /**\n   * @param {?} _ngZone\n   * @param {?} _platform\n   */\n  constructor(_ngZone, _platform) {\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /**\n     * The focus origin that the next focus event is a result of.\n     */\n    this._origin = null;\n    /**\n     * Whether the window has just been focused.\n     */\n    this._windowFocused = false;\n    /**\n     * Map of elements being monitored to their info.\n     */\n    this._elementInfo = new Map();\n    /**\n     * A map of global objects to lists of current listeners.\n     */\n    this._unregisterGlobalListeners = () => {};\n    /**\n     * The number of elements currently being monitored.\n     */\n    this._monitoredElementCount = 0;\n  }\n  /**\n   * @param {?} element\n   * @param {?=} checkChildren\n   * @return {?}\n   */\n  monitor(element, checkChildren = false) {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return of(null);\n    }\n    /** @type {?} */\n    const nativeElement = this._getNativeElement(element);\n    // Check if we're already monitoring this element.\n    if (this._elementInfo.has(nativeElement)) {\n      /** @type {?} */\n      let cachedInfo = this._elementInfo.get(nativeElement); /** @type {?} */\n      cachedInfo.checkChildren = checkChildren;\n      return (/** @type {?} */cachedInfo.subject.asObservable()\n      );\n    }\n    /** @type {?} */\n    let info = {\n      unlisten: () => {},\n      checkChildren: checkChildren,\n      subject: new Subject()\n    };\n    this._elementInfo.set(nativeElement, info);\n    this._incrementMonitoredElementCount();\n    /** @type {?} */\n    let focusListener = event => this._onFocus(event, nativeElement);\n    /** @type {?} */\n    let blurListener = event => this._onBlur(event, nativeElement);\n    this._ngZone.runOutsideAngular(() => {\n      nativeElement.addEventListener('focus', focusListener, true);\n      nativeElement.addEventListener('blur', blurListener, true);\n    });\n    // Create an unlisten function for later.\n    info.unlisten = () => {\n      nativeElement.removeEventListener('focus', focusListener, true);\n      nativeElement.removeEventListener('blur', blurListener, true);\n    };\n    return info.subject.asObservable();\n  }\n  /**\n   * @param {?} element\n   * @return {?}\n   */\n  stopMonitoring(element) {\n    /** @type {?} */\n    const nativeElement = this._getNativeElement(element);\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(nativeElement);\n    if (elementInfo) {\n      elementInfo.unlisten();\n      elementInfo.subject.complete();\n      this._setClasses(nativeElement);\n      this._elementInfo.delete(nativeElement);\n      this._decrementMonitoredElementCount();\n    }\n  }\n  /**\n   * @param {?} element\n   * @param {?} origin\n   * @param {?=} options\n   * @return {?}\n   */\n  focusVia(element, origin, options) {\n    /** @type {?} */\n    const nativeElement = this._getNativeElement(element);\n    this._setOriginForCurrentEventQueue(origin);\n    // `focus` isn't available on the server\n    if (typeof nativeElement.focus === 'function') {\n      // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n      /** @type {?} */nativeElement.focus(options);\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n  }\n  /**\n   * Register necessary event listeners on the document and window.\n   * @return {?}\n   */\n  _registerGlobalListeners() {\n    // Do nothing if we're not on the browser platform.\n    if (!this._platform.isBrowser) {\n      return;\n    }\n    /** @type {?} */\n    let documentKeydownListener = () => {\n      this._lastTouchTarget = null;\n      this._setOriginForCurrentEventQueue('keyboard');\n    };\n    /** @type {?} */\n    let documentMousedownListener = () => {\n      if (!this._lastTouchTarget) {\n        this._setOriginForCurrentEventQueue('mouse');\n      }\n    };\n    /** @type {?} */\n    let documentTouchstartListener = event => {\n      if (this._touchTimeoutId != null) {\n        clearTimeout(this._touchTimeoutId);\n      }\n      this._lastTouchTarget = event.target;\n      this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n    };\n    /** @type {?} */\n    let windowFocusListener = () => {\n      this._windowFocused = true;\n      this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n    };\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\n    // propagation.\n    this._ngZone.runOutsideAngular(() => {\n      document.addEventListener('keydown', documentKeydownListener, true);\n      document.addEventListener('mousedown', documentMousedownListener, true);\n      document.addEventListener('touchstart', documentTouchstartListener, supportsPassiveEventListeners() ? /** @type {?} */{\n        passive: true,\n        capture: true\n      } : true);\n      window.addEventListener('focus', windowFocusListener);\n    });\n    this._unregisterGlobalListeners = () => {\n      document.removeEventListener('keydown', documentKeydownListener, true);\n      document.removeEventListener('mousedown', documentMousedownListener, true);\n      document.removeEventListener('touchstart', documentTouchstartListener, supportsPassiveEventListeners() ? /** @type {?} */{\n        passive: true,\n        capture: true\n      } : true);\n      window.removeEventListener('focus', windowFocusListener);\n      // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n      clearTimeout(this._windowFocusTimeoutId);\n      clearTimeout(this._touchTimeoutId);\n      clearTimeout(this._originTimeoutId);\n    };\n  }\n  /**\n   * @param {?} element\n   * @param {?} className\n   * @param {?} shouldSet\n   * @return {?}\n   */\n  _toggleClass(element, className, shouldSet) {\n    if (shouldSet) {\n      element.classList.add(className);\n    } else {\n      element.classList.remove(className);\n    }\n  }\n  /**\n   * Sets the focus classes on the element based on the given focus origin.\n   * @param {?} element The element to update the classes on.\n   * @param {?=} origin The focus origin.\n   * @return {?}\n   */\n  _setClasses(element, origin) {\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n    if (elementInfo) {\n      this._toggleClass(element, 'cdk-focused', !!origin);\n      this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n      this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n      this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n      this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n  }\n  /**\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\n   * @param {?} origin The origin to set.\n   * @return {?}\n   */\n  _setOriginForCurrentEventQueue(origin) {\n    this._ngZone.runOutsideAngular(() => {\n      this._origin = origin;\n      // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n      // tick after the interaction event fired. To ensure the focus origin is always correct,\n      // the focus origin will be determined at the beginning of the next tick.\n      this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n    });\n  }\n  /**\n   * Checks whether the given focus event was caused by a touchstart event.\n   * @param {?} event The focus event to check.\n   * @return {?} Whether the event was caused by a touch.\n   */\n  _wasCausedByTouch(event) {\n    /** @type {?} */\n    let focusTarget = event.target;\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n  }\n  /**\n   * Handles focus events on a registered element.\n   * @param {?} event The focus event.\n   * @param {?} element The monitored element.\n   * @return {?}\n   */\n  _onFocus(event, element) {\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || !elementInfo.checkChildren && element !== event.target) {\n      return;\n    }\n    /** @type {?} */\n    let origin = this._origin;\n    if (!origin) {\n      if (this._windowFocused && this._lastFocusOrigin) {\n        origin = this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        origin = 'touch';\n      } else {\n        origin = 'program';\n      }\n    }\n    this._setClasses(element, origin);\n    this._emitOrigin(elementInfo.subject, origin);\n    this._lastFocusOrigin = origin;\n  }\n  /**\n   * Handles blur events on a registered element.\n   * @param {?} event The blur event.\n   * @param {?} element The monitored element.\n   * @return {?}\n   */\n  _onBlur(event, element) {\n    /** @type {?} */\n    const elementInfo = this._elementInfo.get(element);\n    if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n      return;\n    }\n    this._setClasses(element);\n    this._emitOrigin(elementInfo.subject, null);\n  }\n  /**\n   * @param {?} subject\n   * @param {?} origin\n   * @return {?}\n   */\n  _emitOrigin(subject, origin) {\n    this._ngZone.run(() => subject.next(origin));\n  }\n  /**\n   * @return {?}\n   */\n  _incrementMonitoredElementCount() {\n    // Register global listeners when first element is monitored.\n    if (++this._monitoredElementCount == 1) {\n      this._registerGlobalListeners();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _decrementMonitoredElementCount() {\n    // Unregister global listeners when last element is unmonitored.\n    if (! --this._monitoredElementCount) {\n      this._unregisterGlobalListeners();\n      this._unregisterGlobalListeners = () => {};\n    }\n  }\n  /**\n   * @param {?} element\n   * @return {?}\n   */\n  _getNativeElement(element) {\n    return element instanceof ElementRef ? element.nativeElement : element;\n  }\n}\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n  return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\nFocusMonitor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: FocusMonitor,\n  factory: FocusMonitor.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nFocusMonitor.ctorParameters = () => [{\n  type: NgZone\n}, {\n  type: Platform\n}];\n/** @nocollapse */\nFocusMonitor.ngInjectableDef = defineInjectable({\n  factory: function FocusMonitor_Factory() {\n    return new FocusMonitor(inject(NgZone), inject(Platform));\n  },\n  token: FocusMonitor,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _focusMonitor\n   */\n  constructor(_elementRef, _focusMonitor) {\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this.cdkFocusChange = new EventEmitter();\n    this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(origin => this.cdkFocusChange.emit(origin));\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._monitorSubscription.unsubscribe();\n  }\n}\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n  return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n};\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkMonitorFocus,\n  selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n  outputs: {\n    cdkFocusChange: \"cdkFocusChange\"\n  }\n});\n/** @nocollapse */\nCdkMonitorFocus.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: FocusMonitor\n}];\nCdkMonitorFocus.propDecorators = {\n  cdkFocusChange: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusMonitor\n    }];\n  }, {\n    cdkFocusChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n  return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst FOCUS_MONITOR_PROVIDER = {\n  // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n  provide: FocusMonitor,\n  deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n  useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nfunction isFakeMousedownFromScreenReader(event) {\n  return event.buttons === 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass A11yModule {}\nA11yModule.ɵfac = function A11yModule_Factory(t) {\n  return new (t || A11yModule)();\n};\nA11yModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: A11yModule\n});\nA11yModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule, PlatformModule, ObserversModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PlatformModule, ObserversModule],\n      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function () {\n      return [CommonModule, PlatformModule, ObserversModule];\n    },\n    exports: function () {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule };","map":{"version":3,"names":["DOCUMENT","CommonModule","Inject","Injectable","Optional","SkipSelf","QueryList","Directive","ElementRef","Input","NgZone","InjectionToken","EventEmitter","Output","NgModule","defineInjectable","inject","Subject","Subscription","of","UP_ARROW","DOWN_ARROW","LEFT_ARROW","RIGHT_ARROW","TAB","A","Z","ZERO","NINE","debounceTime","filter","map","tap","take","Platform","supportsPassiveEventListeners","PlatformModule","coerceBooleanProperty","ContentObserver","ObserversModule","ɵngcc0","ɵngcc1","ɵngcc2","ID_DELIMINATOR","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","removeAriaReferencedId","filteredIds","val","getAttribute","match","MESSAGES_CONTAINER_ID","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","messageRegistry","Map","messagesContainer","AriaDescriber","constructor","_document","describe","hostElement","message","_canBeDescribed","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","removeDescription","_removeMessageReference","registeredMessage","get","referenceCount","_deleteMessageElement","childNodes","length","_deleteMessagesContainer","ngOnDestroy","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","removeAttribute","clear","messageElement","createElement","appendChild","createTextNode","_createMessagesContainer","set","removeChild","delete","preExistingContainer","getElementById","parentNode","style","display","body","element","originalReferenceIds","indexOf","referenceIds","messageId","nodeType","ELEMENT_NODE","ɵfac","AriaDescriber_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ctorParameters","type","undefined","decorators","args","ngInjectableDef","ngDevMode","ɵsetClassMetadata","ARIA_DESCRIBER_PROVIDER_FACTORY","parentDispatcher","ARIA_DESCRIBER_PROVIDER","provide","deps","useFactory","ListKeyManager","_items","_activeItemIndex","_wrap","_letterKeyStream","_typeaheadSubscription","EMPTY","_vertical","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","changes","subscribe","newItems","_activeItem","itemArray","toArray","newIndex","skipPredicate","predicate","withWrap","shouldWrap","withVerticalOrientation","enabled","withHorizontalOrientation","direction","_horizontal","withTypeAhead","debounceInterval","getLabel","Error","unsubscribe","pipe","keyCode","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","previousIndex","updateActiveItem","next","onKeydown","event","setNextItemActive","setPreviousItemActive","key","toLocaleUpperCase","String","fromCharCode","preventDefault","activeItemIndex","activeItem","setFirstItemActive","_setActiveItemByIndex","setLastItemActive","_setActiveItemByDelta","updateActiveItemIndex","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","setInactiveStyles","setActiveStyles","FocusKeyManager","arguments","_origin","setFocusOrigin","origin","focus","InteractivityChecker","_platform","isDisabled","hasAttribute","isVisible","hasGeometry","getComputedStyle","visibility","isTabbable","isBrowser","frameElement","getFrameElement","getWindow","frameType","nodeName","toLowerCase","getTabIndexValue","BLINK","WEBKIT","tabIndexValue","TRIDENT","FIREFOX","IOS","isPotentiallyTabbableIOS","tabIndex","isFocusable","isPotentiallyFocusable","InteractivityChecker_Factory","window","e","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","isAnchorWithHref","isAnchorElement","hasValidTabIndex","isNaN","parseInt","inputType","node","ownerDocument","defaultView","FocusTrap","_element","_checker","_ngZone","deferAnchors","_hasAttached","_enabled","attachAnchors","value","_startAnchor","_endAnchor","_toggleAnchorTabIndex","destroy","runOutsideAngular","_createAnchor","addEventListener","focusLastTabbableElement","focusFirstTabbableElement","insertBefore","nextSibling","focusInitialElementWhenReady","Promise","resolve","_executeOnStable","focusInitialElement","focusFirstTabbableElementWhenReady","focusLastTabbableElementWhenReady","_getRegionBoundary","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","hasAttached","root","children","tabbableChild","anchor","classList","add","isEnabled","fn","isStable","onStable","asObservable","FocusTrapFactory","create","deferCaptureElements","FocusTrapFactory_Factory","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","nativeElement","autoCapture","_autoCapture","ngAfterContentInit","activeElement","ngDoCheck","CdkTrapFocus_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","exportAs","propDecorators","selector","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LiveAnnouncer","elementToken","_liveElement","_createLiveElement","announce","politeness","textContent","setTimeout","elementClass","previousElements","getElementsByClassName","liveEl","LiveAnnouncer_Factory","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","_subscription","observe","CdkAriaLive_Factory","LIVE_ANNOUNCER_PROVIDER_FACTORY","liveElement","ngZone","LIVE_ANNOUNCER_PROVIDER","TOUCH_BUFFER_MS","FocusMonitor","_windowFocused","_elementInfo","_unregisterGlobalListeners","_monitoredElementCount","monitor","checkChildren","_getNativeElement","cachedInfo","subject","info","unlisten","_incrementMonitoredElementCount","focusListener","_onFocus","blurListener","_onBlur","removeEventListener","stopMonitoring","elementInfo","complete","_setClasses","_decrementMonitoredElementCount","focusVia","options","_setOriginForCurrentEventQueue","forEach","_info","_registerGlobalListeners","documentKeydownListener","_lastTouchTarget","documentMousedownListener","documentTouchstartListener","_touchTimeoutId","clearTimeout","target","windowFocusListener","_windowFocusTimeoutId","document","passive","capture","_originTimeoutId","_toggleClass","className","shouldSet","remove","_wasCausedByTouch","focusTarget","Node","contains","_lastFocusOrigin","_emitOrigin","relatedTarget","run","FocusMonitor_Factory","CdkMonitorFocus","_focusMonitor","cdkFocusChange","_monitorSubscription","emit","CdkMonitorFocus_Factory","outputs","FOCUS_MONITOR_PROVIDER_FACTORY","platform","FOCUS_MONITOR_PROVIDER","isFakeMousedownFromScreenReader","buttons","A11yModule","A11yModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/duel-zone/Web/ClientApp/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/a11y.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Inject, Injectable, Optional, SkipSelf, QueryList, Directive, ElementRef, Input, NgZone, InjectionToken, EventEmitter, Output, NgModule, defineInjectable, inject } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, TAB, A, Z, ZERO, NINE } from '@angular/cdk/keycodes';\nimport { debounceTime, filter, map, tap, take } from 'rxjs/operators';\nimport { Platform, supportsPassiveEventListeners, PlatformModule } from '@angular/cdk/platform';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * IDs are deliminated by an empty space, as per the spec.\n  @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMINATOR = ' ';\n/**\n * Adds the given ID to the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction addAriaReferencedId(el, attr, id) {\n    /** @type {?} */\n    const ids = getAriaReferenceIds(el, attr);\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\n        return;\n    }\n    ids.push(id.trim());\n    el.setAttribute(attr, ids.join(ID_DELIMINATOR));\n}\n/**\n * Removes the given ID from the specified ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @param {?} id\n * @return {?}\n */\nfunction removeAriaReferencedId(el, attr, id) {\n    /** @type {?} */\n    const ids = getAriaReferenceIds(el, attr);\n    /** @type {?} */\n    const filteredIds = ids.filter(val => val != id.trim());\n    el.setAttribute(attr, filteredIds.join(ID_DELIMINATOR));\n}\n/**\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\n * Used for attributes such as aria-labelledby, aria-owns, etc.\n * @param {?} el\n * @param {?} attr\n * @return {?}\n */\nfunction getAriaReferenceIds(el, attr) {\n    // Get string array of all individual ids (whitespace deliminated) in the attribute value\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * ID used for the body container where all messages are appended.\n  @type {?} */\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** *\n * ID prefix used for each created message element.\n  @type {?} */\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** *\n * Attribute given to each host element that is described by a message element.\n  @type {?} */\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** *\n * Global incremental identifier for each registered message element.\n  @type {?} */\nlet nextId = 0;\n/** *\n * Global map of all registered message elements that have been placed into the document.\n  @type {?} */\nconst messageRegistry = new Map();\n/** *\n * Container for all registered messages.\n  @type {?} */\nlet messagesContainer = null;\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * \\@docs-private\n */\nclass AriaDescriber {\n    /**\n     * @param {?} _document\n     */\n    constructor(_document) {\n        this._document = _document;\n    }\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n    describe(hostElement, message) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        if (!messageRegistry.has(message)) {\n            this._createMessageElement(message);\n        }\n        if (!this._isElementDescribedByMessage(hostElement, message)) {\n            this._addMessageReference(hostElement, message);\n        }\n    }\n    /**\n     * Removes the host element's aria-describedby reference to the message element.\n     * @param {?} hostElement\n     * @param {?} message\n     * @return {?}\n     */\n    removeDescription(hostElement, message) {\n        if (!this._canBeDescribed(hostElement, message)) {\n            return;\n        }\n        if (this._isElementDescribedByMessage(hostElement, message)) {\n            this._removeMessageReference(hostElement, message);\n        }\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n            this._deleteMessageElement(message);\n        }\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\n            this._deleteMessagesContainer();\n        }\n    }\n    /**\n     * Unregisters all created message elements and removes the message container.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\n        for (let i = 0; i < describedElements.length; i++) {\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n        }\n        if (messagesContainer) {\n            this._deleteMessagesContainer();\n        }\n        messageRegistry.clear();\n    }\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     * @param {?} message\n     * @return {?}\n     */\n    _createMessageElement(message) {\n        /** @type {?} */\n        const messageElement = this._document.createElement('div');\n        messageElement.setAttribute('id', `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`);\n        messageElement.appendChild(/** @type {?} */ ((this._document.createTextNode(message))));\n        this._createMessagesContainer(); /** @type {?} */\n        ((messagesContainer)).appendChild(messageElement);\n        messageRegistry.set(message, { messageElement, referenceCount: 0 });\n    }\n    /**\n     * Deletes the message element from the global messages container.\n     * @param {?} message\n     * @return {?}\n     */\n    _deleteMessageElement(message) {\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n        /** @type {?} */\n        const messageElement = registeredMessage && registeredMessage.messageElement;\n        if (messagesContainer && messageElement) {\n            messagesContainer.removeChild(messageElement);\n        }\n        messageRegistry.delete(message);\n    }\n    /**\n     * Creates the global container for all aria-describedby messages.\n     * @return {?}\n     */\n    _createMessagesContainer() {\n        if (!messagesContainer) {\n            /** @type {?} */\n            const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\n            // When going from the server to the client, we may end up in a situation where there's\n            // already a container on the page, but we don't have a reference to it. Clear the\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\n            // container, should be slightly faster.\n            if (preExistingContainer) {\n                /** @type {?} */ ((preExistingContainer.parentNode)).removeChild(preExistingContainer);\n            }\n            messagesContainer = this._document.createElement('div');\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\n            messagesContainer.setAttribute('aria-hidden', 'true');\n            messagesContainer.style.display = 'none';\n            this._document.body.appendChild(messagesContainer);\n        }\n    }\n    /**\n     * Deletes the global messages container.\n     * @return {?}\n     */\n    _deleteMessagesContainer() {\n        if (messagesContainer && messagesContainer.parentNode) {\n            messagesContainer.parentNode.removeChild(messagesContainer);\n            messagesContainer = null;\n        }\n    }\n    /**\n     * Removes all cdk-describedby messages that are hosted through the element.\n     * @param {?} element\n     * @return {?}\n     */\n    _removeCdkDescribedByReferenceIds(element) {\n        /** @type {?} */\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\n            .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _addMessageReference(element, message) {\n        /** @type {?} */\n        const registeredMessage = /** @type {?} */ ((messageRegistry.get(message)));\n        // Add the aria-describedby reference and set the\n        // describedby_host attribute to mark the element.\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n        registeredMessage.referenceCount++;\n    }\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _removeMessageReference(element, message) {\n        /** @type {?} */\n        const registeredMessage = /** @type {?} */ ((messageRegistry.get(message)));\n        registeredMessage.referenceCount--;\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /**\n     * Returns true if the element has been described by the provided message ID.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _isElementDescribedByMessage(element, message) {\n        /** @type {?} */\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n        /** @type {?} */\n        const registeredMessage = messageRegistry.get(message);\n        /** @type {?} */\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /**\n     * Determines whether a message can be described on a particular element.\n     * @param {?} element\n     * @param {?} message\n     * @return {?}\n     */\n    _canBeDescribed(element, message) {\n        return element.nodeType === this._document.ELEMENT_NODE && message != null &&\n            !!`${message}`.trim();\n    }\n}\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) { return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nAriaDescriber.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: AriaDescriber, factory: AriaDescriber.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nAriaDescriber.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ AriaDescriber.ngInjectableDef = defineInjectable({ factory: function AriaDescriber_Factory() { return new AriaDescriber(inject(DOCUMENT)); }, token: AriaDescriber, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher, _document) {\n    return parentDispatcher || new AriaDescriber(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst ARIA_DESCRIBER_PROVIDER = {\n    // If there is already an AriaDescriber available, use that. Otherwise, provide a new one.\n    provide: AriaDescriber,\n    deps: [\n        [new Optional(), new SkipSelf(), AriaDescriber],\n        /** @type {?} */ (DOCUMENT)\n    ],\n    useFactory: ARIA_DESCRIBER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n// unsupported: template constraints.\n/**\n * This class manages keyboard events for selectable lists. If you pass it a query list\n * of items, it will set the active item correctly when arrow events occur.\n * @template T\n */\nclass ListKeyManager {\n    /**\n     * @param {?} _items\n     */\n    constructor(_items) {\n        this._items = _items;\n        this._activeItemIndex = -1;\n        this._wrap = false;\n        this._letterKeyStream = new Subject();\n        this._typeaheadSubscription = Subscription.EMPTY;\n        this._vertical = true;\n        /**\n         * Predicate function that can be used to check whether an item should be skipped\n         * by the key manager. By default, disabled items are skipped.\n         */\n        this._skipPredicateFn = (item) => item.disabled;\n        this._pressedLetters = [];\n        /**\n         * Stream that emits any time the TAB key is pressed, so components can react\n         * when focus is shifted off of the list.\n         */\n        this.tabOut = new Subject();\n        /**\n         * Stream that emits whenever the active item of the list manager changes.\n         */\n        this.change = new Subject();\n        // We allow for the items to be an array because, in some cases, the consumer may\n        // not have access to a QueryList of the items they want to manage (e.g. when the\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\n        if (_items instanceof QueryList) {\n            _items.changes.subscribe((newItems) => {\n                if (this._activeItem) {\n                    /** @type {?} */\n                    const itemArray = newItems.toArray();\n                    /** @type {?} */\n                    const newIndex = itemArray.indexOf(this._activeItem);\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\n                        this._activeItemIndex = newIndex;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Sets the predicate function that determines which items should be skipped by the\n     * list key manager.\n     * @param {?} predicate Function that determines whether the given item should be skipped.\n     * @return {?}\n     */\n    skipPredicate(predicate) {\n        this._skipPredicateFn = predicate;\n        return this;\n    }\n    /**\n     * Configures wrapping mode, which determines whether the active item will wrap to\n     * the other end of list when there are no more items in the given direction.\n     * @param {?=} shouldWrap Whether the list should wrap when reaching the end.\n     * @return {?}\n     */\n    withWrap(shouldWrap = true) {\n        this._wrap = shouldWrap;\n        return this;\n    }\n    /**\n     * Configures whether the key manager should be able to move the selection vertically.\n     * @param {?=} enabled Whether vertical selection should be enabled.\n     * @return {?}\n     */\n    withVerticalOrientation(enabled = true) {\n        this._vertical = enabled;\n        return this;\n    }\n    /**\n     * Configures the key manager to move the selection horizontally.\n     * Passing in `null` will disable horizontal movement.\n     * @param {?} direction Direction in which the selection can be moved.\n     * @return {?}\n     */\n    withHorizontalOrientation(direction) {\n        this._horizontal = direction;\n        return this;\n    }\n    /**\n     * Turns on typeahead mode which allows users to set the active item by typing.\n     * @param {?=} debounceInterval Time to wait after the last keystroke before setting the active item.\n     * @return {?}\n     */\n    withTypeAhead(debounceInterval = 200) {\n        if (this._items.length && this._items.some(item => typeof item.getLabel !== 'function')) {\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n        }\n        this._typeaheadSubscription.unsubscribe();\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n        // and convert those letters back into a string. Afterwards find the first item that starts\n        // with that string and select it.\n        this._typeaheadSubscription = this._letterKeyStream.pipe(tap(keyCode => this._pressedLetters.push(keyCode)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\n            /** @type {?} */\n            const items = this._getItemsArray();\n            // Start at 1 because we want to start searching at the item immediately\n            // following the current active item.\n            for (let i = 1; i < items.length + 1; i++) {\n                /** @type {?} */\n                const index = (this._activeItemIndex + i) % items.length;\n                /** @type {?} */\n                const item = items[index];\n                if (!this._skipPredicateFn(item) && /** @type {?} */ ((item.getLabel))().toUpperCase().trim().indexOf(inputString) === 0) {\n                    this.setActiveItem(index);\n                    break;\n                }\n            }\n            this._pressedLetters = [];\n        });\n        return this;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    setActiveItem(item) {\n        /** @type {?} */\n        const previousIndex = this._activeItemIndex;\n        this.updateActiveItem(item);\n        if (this._activeItemIndex !== previousIndex) {\n            this.change.next(this._activeItemIndex);\n        }\n    }\n    /**\n     * Sets the active item depending on the key event passed in.\n     * @param {?} event Keyboard event to be used for determining which element should be active.\n     * @return {?}\n     */\n    onKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        switch (keyCode) {\n            case TAB:\n                this.tabOut.next();\n                return;\n            case DOWN_ARROW:\n                if (this._vertical) {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case UP_ARROW:\n                if (this._vertical) {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case RIGHT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setNextItemActive();\n                    break;\n                }\n                else if (this._horizontal === 'rtl') {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            case LEFT_ARROW:\n                if (this._horizontal === 'ltr') {\n                    this.setPreviousItemActive();\n                    break;\n                }\n                else if (this._horizontal === 'rtl') {\n                    this.setNextItemActive();\n                    break;\n                }\n                else {\n                    return;\n                }\n            default:\n                // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n                // otherwise fall back to resolving alphanumeric characters via the keyCode.\n                if (event.key && event.key.length === 1) {\n                    this._letterKeyStream.next(event.key.toLocaleUpperCase());\n                }\n                else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\n                    this._letterKeyStream.next(String.fromCharCode(keyCode));\n                }\n                // Note that we return here, in order to avoid preventing\n                // the default action of non-navigational keys.\n                return;\n        }\n        this._pressedLetters = [];\n        event.preventDefault();\n    }\n    /**\n     * Index of the currently active item.\n     * @return {?}\n     */\n    get activeItemIndex() {\n        return this._activeItemIndex;\n    }\n    /**\n     * The active item.\n     * @return {?}\n     */\n    get activeItem() {\n        return this._activeItem;\n    }\n    /**\n     * Sets the active item to the first enabled item in the list.\n     * @return {?}\n     */\n    setFirstItemActive() {\n        this._setActiveItemByIndex(0, 1);\n    }\n    /**\n     * Sets the active item to the last enabled item in the list.\n     * @return {?}\n     */\n    setLastItemActive() {\n        this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /**\n     * Sets the active item to the next enabled item in the list.\n     * @return {?}\n     */\n    setNextItemActive() {\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /**\n     * Sets the active item to a previous enabled item in the list.\n     * @return {?}\n     */\n    setPreviousItemActive() {\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\n            : this._setActiveItemByDelta(-1);\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    updateActiveItem(item) {\n        /** @type {?} */\n        const itemArray = this._getItemsArray();\n        /** @type {?} */\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\n        this._activeItemIndex = index;\n        this._activeItem = itemArray[index];\n    }\n    /**\n     * Allows setting of the activeItemIndex without any other effects.\n     * @deprecated Use `updateActiveItem` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} index The new activeItemIndex.\n     * @return {?}\n     */\n    updateActiveItemIndex(index) {\n        this.updateActiveItem(index);\n    }\n    /**\n     * This method sets the active item, given a list of items and the delta between the\n     * currently active item and the new active item. It will calculate differently\n     * depending on whether wrap mode is turned on.\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveItemByDelta(delta) {\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\n     * down the list until it finds an item that is not disabled, and it will wrap if it\n     * encounters either end of the list.\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveInWrapMode(delta) {\n        /** @type {?} */\n        const items = this._getItemsArray();\n        for (let i = 1; i <= items.length; i++) {\n            /** @type {?} */\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\n            /** @type {?} */\n            const item = items[index];\n            if (!this._skipPredicateFn(item)) {\n                this.setActiveItem(index);\n                return;\n            }\n        }\n    }\n    /**\n     * Sets the active item properly given the default mode. In other words, it will\n     * continue to move down the list until it finds an item that is not disabled. If\n     * it encounters either end of the list, it will stop and not wrap.\n     * @param {?} delta\n     * @return {?}\n     */\n    _setActiveInDefaultMode(delta) {\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\n     * Sets the active item to the first enabled item starting at the index specified. If the\n     * item is disabled, it will move in the fallbackDelta direction until it either\n     * finds an enabled item or encounters the end of the list.\n     * @param {?} index\n     * @param {?} fallbackDelta\n     * @return {?}\n     */\n    _setActiveItemByIndex(index, fallbackDelta) {\n        /** @type {?} */\n        const items = this._getItemsArray();\n        if (!items[index]) {\n            return;\n        }\n        while (this._skipPredicateFn(items[index])) {\n            index += fallbackDelta;\n            if (!items[index]) {\n                return;\n            }\n        }\n        this.setActiveItem(index);\n    }\n    /**\n     * Returns the items as an array.\n     * @return {?}\n     */\n    _getItemsArray() {\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass ActiveDescendantKeyManager extends ListKeyManager {\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    setActiveItem(index) {\n        if (this.activeItem) {\n            this.activeItem.setInactiveStyles();\n        }\n        super.setActiveItem(index);\n        if (this.activeItem) {\n            this.activeItem.setActiveStyles();\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @template T\n */\nclass FocusKeyManager extends ListKeyManager {\n    constructor() {\n        super(...arguments);\n        this._origin = 'program';\n    }\n    /**\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\n     * @param {?} origin Focus origin to be used when focusing items.\n     * @return {?}\n     */\n    setFocusOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * @param {?} item\n     * @return {?}\n     */\n    setActiveItem(item) {\n        super.setActiveItem(item);\n        if (this.activeItem) {\n            this.activeItem.focus(this._origin);\n        }\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Utility for checking the interactivity of an element, such as whether is is focusable or\n * tabbable.\n */\nclass InteractivityChecker {\n    /**\n     * @param {?} _platform\n     */\n    constructor(_platform) {\n        this._platform = _platform;\n    }\n    /**\n     * Gets whether an element is disabled.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is disabled.\n     */\n    isDisabled(element) {\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\n        // a form control inside of a disabled form, but should capture the most common cases.\n        return element.hasAttribute('disabled');\n    }\n    /**\n     * Gets whether an element is visible for the purposes of interactivity.\n     *\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\n     *\n     * @param {?} element\n     * @return {?} Whether the element is visible.\n     */\n    isVisible(element) {\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\n     * Gets whether an element can be reached via Tab key.\n     * Assumes that the element has already been checked with isFocusable.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is tabbable.\n     */\n    isTabbable(element) {\n        // Nothing is tabbable on the the server 😎\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n        /** @type {?} */\n        const frameElement = getFrameElement(getWindow(element));\n        if (frameElement) {\n            /** @type {?} */\n            const frameType = frameElement && frameElement.nodeName.toLowerCase();\n            // Frame elements inherit their tabindex onto all child elements.\n            if (getTabIndexValue(frameElement) === -1) {\n                return false;\n            }\n            // Webkit and Blink consider anything inside of an <object> element as non-tabbable.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {\n                return false;\n            }\n            // Webkit and Blink disable tabbing to an element inside of an invisible frame.\n            if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {\n                return false;\n            }\n        }\n        /** @type {?} */\n        let nodeName = element.nodeName.toLowerCase();\n        /** @type {?} */\n        let tabIndexValue = getTabIndexValue(element);\n        if (element.hasAttribute('contenteditable')) {\n            return tabIndexValue !== -1;\n        }\n        if (nodeName === 'iframe') {\n            // The frames may be tabbable depending on content, but it's not possibly to reliably\n            // investigate the content of the frames.\n            return false;\n        }\n        if (nodeName === 'audio') {\n            if (!element.hasAttribute('controls')) {\n                // By default an <audio> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK) {\n                // In Blink <audio controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'video') {\n            if (!element.hasAttribute('controls') && this._platform.TRIDENT) {\n                // In Trident a <video> element without the controls enabled is not tabbable.\n                return false;\n            }\n            else if (this._platform.BLINK || this._platform.FIREFOX) {\n                // In Chrome and Firefox <video controls> elements are always tabbable.\n                return true;\n            }\n        }\n        if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {\n            // In all Blink and WebKit based browsers <object> elements are never tabbable.\n            return false;\n        }\n        // In iOS the browser only considers some specific elements as tabbable.\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n            return false;\n        }\n        return element.tabIndex >= 0;\n    }\n    /**\n     * Gets whether an element can be focused by the user.\n     *\n     * @param {?} element Element to be checked.\n     * @return {?} Whether the element is focusable.\n     */\n    isFocusable(element) {\n        // Perform checks in order of left to most expensive.\n        // Again, naive approach that does not capture many edge cases and browser quirks.\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);\n    }\n}\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) { return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nInteractivityChecker.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: InteractivityChecker, factory: InteractivityChecker.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nInteractivityChecker.ctorParameters = () => [\n    { type: Platform }\n];\n/** @nocollapse */ InteractivityChecker.ngInjectableDef = defineInjectable({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(inject(Platform)); }, token: InteractivityChecker, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\n * the frameElement property is being accessed from a different host address, this property\n * should be accessed carefully.\n * @param {?} window\n * @return {?}\n */\nfunction getFrameElement(window) {\n    try {\n        return /** @type {?} */ (window.frameElement);\n    }\n    catch (e) {\n        return null;\n    }\n}\n/**\n * Checks whether the specified element has any geometry / rectangles.\n * @param {?} element\n * @return {?}\n */\nfunction hasGeometry(element) {\n    // Use logic from jQuery to check for an invisible element.\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n    return !!(element.offsetWidth || element.offsetHeight ||\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\n}\n/**\n * Gets whether an element's\n * @param {?} element\n * @return {?}\n */\nfunction isNativeFormElement(element) {\n    /** @type {?} */\n    let nodeName = element.nodeName.toLowerCase();\n    return nodeName === 'input' ||\n        nodeName === 'select' ||\n        nodeName === 'button' ||\n        nodeName === 'textarea';\n}\n/**\n * Gets whether an element is an `<input type=\"hidden\">`.\n * @param {?} element\n * @return {?}\n */\nfunction isHiddenInput(element) {\n    return isInputElement(element) && element.type == 'hidden';\n}\n/**\n * Gets whether an element is an anchor that has an href attribute.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorWithHref(element) {\n    return isAnchorElement(element) && element.hasAttribute('href');\n}\n/**\n * Gets whether an element is an input element.\n * @param {?} element\n * @return {?}\n */\nfunction isInputElement(element) {\n    return element.nodeName.toLowerCase() == 'input';\n}\n/**\n * Gets whether an element is an anchor element.\n * @param {?} element\n * @return {?}\n */\nfunction isAnchorElement(element) {\n    return element.nodeName.toLowerCase() == 'a';\n}\n/**\n * Gets whether an element has a valid tabindex.\n * @param {?} element\n * @return {?}\n */\nfunction hasValidTabIndex(element) {\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n        return false;\n    }\n    /** @type {?} */\n    let tabIndex = element.getAttribute('tabindex');\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\n    if (tabIndex == '-32768') {\n        return false;\n    }\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\n * Returns the parsed tabindex from the element attributes instead of returning the\n * evaluated tabindex from the browsers defaults.\n * @param {?} element\n * @return {?}\n */\nfunction getTabIndexValue(element) {\n    if (!hasValidTabIndex(element)) {\n        return null;\n    }\n    /** @type {?} */\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n    return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/**\n * Checks whether the specified element is potentially tabbable on iOS\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyTabbableIOS(element) {\n    /** @type {?} */\n    let nodeName = element.nodeName.toLowerCase();\n    /** @type {?} */\n    let inputType = nodeName === 'input' && (/** @type {?} */ (element)).type;\n    return inputType === 'text'\n        || inputType === 'password'\n        || nodeName === 'select'\n        || nodeName === 'textarea';\n}\n/**\n * Gets whether an element is potentially focusable without taking current visible/disabled state\n * into account.\n * @param {?} element\n * @return {?}\n */\nfunction isPotentiallyFocusable(element) {\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\n    if (isHiddenInput(element)) {\n        return false;\n    }\n    return isNativeFormElement(element) ||\n        isAnchorWithHref(element) ||\n        element.hasAttribute('contenteditable') ||\n        hasValidTabIndex(element);\n}\n/**\n * Gets the parent window of a DOM node with regards of being inside of an iframe.\n * @param {?} node\n * @return {?}\n */\nfunction getWindow(node) {\n    // ownerDocument is null if `node` itself *is* a document.\n    return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * This class currently uses a relatively simple approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause to two to misalign.\n */\nclass FocusTrap {\n    /**\n     * @param {?} _element\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?} _document\n     * @param {?=} deferAnchors\n     */\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\n        this._element = _element;\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._hasAttached = false;\n        this._enabled = true;\n        if (!deferAnchors) {\n            this.attachAnchors();\n        }\n    }\n    /**\n     * Whether the focus trap is active.\n     * @return {?}\n     */\n    get enabled() { return this._enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) {\n        this._enabled = value;\n        if (this._startAnchor && this._endAnchor) {\n            this._toggleAnchorTabIndex(value, this._startAnchor);\n            this._toggleAnchorTabIndex(value, this._endAnchor);\n        }\n    }\n    /**\n     * Destroys the focus trap by cleaning up the anchors.\n     * @return {?}\n     */\n    destroy() {\n        if (this._startAnchor && this._startAnchor.parentNode) {\n            this._startAnchor.parentNode.removeChild(this._startAnchor);\n        }\n        if (this._endAnchor && this._endAnchor.parentNode) {\n            this._endAnchor.parentNode.removeChild(this._endAnchor);\n        }\n        this._startAnchor = this._endAnchor = null;\n    }\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     * @return {?} Whether the focus trap managed to attach successfuly. This may not be the case\n     * if the target element isn't currently in the DOM.\n     */\n    attachAnchors() {\n        // If we're not on the browser, there can be no focus to trap.\n        if (this._hasAttached) {\n            return true;\n        }\n        this._ngZone.runOutsideAngular(() => {\n            if (!this._startAnchor) {\n                this._startAnchor = this._createAnchor(); /** @type {?} */\n                ((this._startAnchor)).addEventListener('focus', () => this.focusLastTabbableElement());\n            }\n            if (!this._endAnchor) {\n                this._endAnchor = this._createAnchor(); /** @type {?} */\n                ((this._endAnchor)).addEventListener('focus', () => this.focusFirstTabbableElement());\n            }\n        });\n        if (this._element.parentNode) {\n            this._element.parentNode.insertBefore(/** @type {?} */ ((this._startAnchor)), this._element);\n            this._element.parentNode.insertBefore(/** @type {?} */ ((this._endAnchor)), this._element.nextSibling);\n            this._hasAttached = true;\n        }\n        return this._hasAttached;\n    }\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusInitialElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusInitialElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusFirstTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\n        });\n    }\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @return {?} Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusLastTabbableElementWhenReady() {\n        return new Promise(resolve => {\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\n        });\n    }\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param {?} bound The boundary to get (start or end of trapped region).\n     * @return {?} The boundary element.\n     */\n    _getRegionBoundary(bound) {\n        /** @type {?} */\n        let markers = /** @type {?} */ (this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\n            `[cdkFocusRegion${bound}], ` +\n            `[cdk-focus-${bound}]`));\n        for (let i = 0; i < markers.length; i++) {\n            // @breaking-change 8.0.0\n            if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\n                    `attribute will be removed in 8.0.0.`, markers[i]);\n            }\n            else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0.`, markers[i]);\n            }\n        }\n        if (bound == 'start') {\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n        }\n        return markers.length ?\n            markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusInitialElement() {\n        /** @type {?} */\n        const redirectToElement = /** @type {?} */ (this._element.querySelector(`[cdk-focus-initial], ` +\n            `[cdkFocusInitial]`));\n        if (redirectToElement) {\n            // @breaking-change 8.0.0\n            if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\n                    `will be removed in 8.0.0`, redirectToElement);\n            }\n            redirectToElement.focus();\n            return true;\n        }\n        return this.focusFirstTabbableElement();\n    }\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusFirstTabbableElement() {\n        /** @type {?} */\n        const redirectToElement = this._getRegionBoundary('start');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @return {?} Whether focus was moved successfuly.\n     */\n    focusLastTabbableElement() {\n        /** @type {?} */\n        const redirectToElement = this._getRegionBoundary('end');\n        if (redirectToElement) {\n            redirectToElement.focus();\n        }\n        return !!redirectToElement;\n    }\n    /**\n     * Checks whether the focus trap has successfuly been attached.\n     * @return {?}\n     */\n    hasAttached() {\n        return this._hasAttached;\n    }\n    /**\n     * Get the first tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n    _getFirstTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        /** @type {?} */\n        let children = root.children || root.childNodes;\n        for (let i = 0; i < children.length; i++) {\n            /** @type {?} */\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getFirstTabbableElement(/** @type {?} */ (children[i])) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /**\n     * Get the last tabbable element from a DOM subtree (inclusive).\n     * @param {?} root\n     * @return {?}\n     */\n    _getLastTabbableElement(root) {\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n            return root;\n        }\n        /** @type {?} */\n        let children = root.children || root.childNodes;\n        for (let i = children.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\n                this._getLastTabbableElement(/** @type {?} */ (children[i])) :\n                null;\n            if (tabbableChild) {\n                return tabbableChild;\n            }\n        }\n        return null;\n    }\n    /**\n     * Creates an anchor element.\n     * @return {?}\n     */\n    _createAnchor() {\n        /** @type {?} */\n        const anchor = this._document.createElement('div');\n        this._toggleAnchorTabIndex(this._enabled, anchor);\n        anchor.classList.add('cdk-visually-hidden');\n        anchor.classList.add('cdk-focus-trap-anchor');\n        return anchor;\n    }\n    /**\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\n     * @param {?} isEnabled Whether the focus trap is enabled.\n     * @param {?} anchor Anchor on which to toggle the tabindex.\n     * @return {?}\n     */\n    _toggleAnchorTabIndex(isEnabled, anchor) {\n        // Remove the tabindex completely, rather than setting it to -1, because if the\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\n     * Executes a function when the zone is stable.\n     * @param {?} fn\n     * @return {?}\n     */\n    _executeOnStable(fn) {\n        if (this._ngZone.isStable) {\n            fn();\n        }\n        else {\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(fn);\n        }\n    }\n}\n/**\n * Factory that allows easy instantiation of focus traps.\n */\nclass FocusTrapFactory {\n    /**\n     * @param {?} _checker\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_checker, _ngZone, _document) {\n        this._checker = _checker;\n        this._ngZone = _ngZone;\n        this._document = _document;\n    }\n    /**\n     * Creates a focus-trapped region around the given element.\n     * @param {?} element The element around which focus will be trapped.\n     * @param {?=} deferCaptureElements Defers the creation of focus-capturing elements to be done\n     *     manually by the user.\n     * @return {?} The created focus trap instance.\n     */\n    create(element, deferCaptureElements = false) {\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n}\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) { return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nFocusTrapFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FocusTrapFactory, factory: FocusTrapFactory.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nFocusTrapFactory.ctorParameters = () => [\n    { type: InteractivityChecker },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ FocusTrapFactory.ngInjectableDef = defineInjectable({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(inject(InteractivityChecker), inject(NgZone), inject(DOCUMENT)); }, token: FocusTrapFactory, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Directive for trapping focus within a region.\n */\nclass CdkTrapFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _document\n     */\n    constructor(_elementRef, _focusTrapFactory, _document) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        /**\n         * Previously focused element to restore focus to upon destroy when using autoCapture.\n         */\n        this._previouslyFocusedElement = null;\n        this._document = _document;\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n    }\n    /**\n     * Whether the focus trap is active.\n     * @return {?}\n     */\n    get enabled() { return this.focusTrap.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) { this.focusTrap.enabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the directive should automatially move focus into the trapped region upon\n     * initialization and return focus to the previous activeElement upon destruction.\n     * @return {?}\n     */\n    get autoCapture() { return this._autoCapture; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoCapture(value) { this._autoCapture = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.focusTrap.destroy();\n        // If we stored a previously focused element when using autoCapture, return focus to that\n        // element now that the trapped region is being destroyed.\n        if (this._previouslyFocusedElement) {\n            this._previouslyFocusedElement.focus();\n            this._previouslyFocusedElement = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this.focusTrap.attachAnchors();\n        if (this.autoCapture) {\n            this._previouslyFocusedElement = /** @type {?} */ (this._document.activeElement);\n            this.focusTrap.focusInitialElementWhenReady();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (!this.focusTrap.hasAttached()) {\n            this.focusTrap.attachAnchors();\n        }\n    }\n}\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) { return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkTrapFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTrapFocus, selectors: [[\"\", \"cdkTrapFocus\", \"\"]], inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"] });\n/** @nocollapse */\nCdkTrapFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTrapFocus.propDecorators = {\n    enabled: [{ type: Input, args: ['cdkTrapFocus',] }],\n    autoCapture: [{ type: Input, args: ['cdkTrapFocusAutoCapture',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { enabled: [{\n            type: Input,\n            args: ['cdkTrapFocus']\n        }], autoCapture: [{\n            type: Input,\n            args: ['cdkTrapFocusAutoCapture']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n    providedIn: 'root',\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass LiveAnnouncer {\n    /**\n     * @param {?} elementToken\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(elementToken, _ngZone, _document) {\n        this._ngZone = _ngZone;\n        // We inject the live element and document as `any` because the constructor signature cannot\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n        // a class decorator causes TypeScript to preserve the constructor signature types.\n        this._document = _document;\n        this._liveElement = elementToken || this._createLiveElement();\n    }\n    /**\n     * Announces a message to screenreaders.\n     * @param {?} message Message to be announced to the screenreader\n     * @param {?=} politeness The politeness of the announcer element\n     * @return {?} Promise that will be resolved when the message is added to the DOM.\n     */\n    announce(message, politeness = 'polite') {\n        this._liveElement.textContent = '';\n        // TODO: ensure changing the politeness works on all environments we support.\n        this._liveElement.setAttribute('aria-live', politeness);\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n        //   second time without clearing and then using a non-zero delay.\n        // (using JAWS 17 at time of this writing).\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    this._liveElement.textContent = message;\n                    resolve();\n                }, 100);\n            });\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._liveElement && this._liveElement.parentNode) {\n            this._liveElement.parentNode.removeChild(this._liveElement);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _createLiveElement() {\n        /** @type {?} */\n        const elementClass = 'cdk-live-announcer-element';\n        /** @type {?} */\n        const previousElements = this._document.getElementsByClassName(elementClass);\n        /** @type {?} */\n        const liveEl = this._document.createElement('div');\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n        for (let i = 0; i < previousElements.length; i++) {\n            /** @type {?} */ ((previousElements[i].parentNode)).removeChild(previousElements[i]);\n        }\n        liveEl.classList.add(elementClass);\n        liveEl.classList.add('cdk-visually-hidden');\n        liveEl.setAttribute('aria-atomic', 'true');\n        liveEl.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(liveEl);\n        return liveEl;\n    }\n}\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) { return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nLiveAnnouncer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LiveAnnouncer, factory: LiveAnnouncer.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nLiveAnnouncer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ LiveAnnouncer.ngInjectableDef = defineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), inject(NgZone), inject(DOCUMENT)); }, token: LiveAnnouncer, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\n * with a wider range of browsers and screen readers.\n */\nclass CdkAriaLive {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _liveAnnouncer\n     * @param {?} _contentObserver\n     * @param {?} _ngZone\n     */\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n        this._elementRef = _elementRef;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._contentObserver = _contentObserver;\n        this._ngZone = _ngZone;\n        this._politeness = 'off';\n    }\n    /**\n     * The aria-live politeness level to use when announcing messages.\n     * @return {?}\n     */\n    get politeness() { return this._politeness; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set politeness(value) {\n        this._politeness = value === 'polite' || value === 'assertive' ? value : 'off';\n        if (this._politeness === 'off') {\n            if (this._subscription) {\n                this._subscription.unsubscribe();\n                this._subscription = null;\n            }\n        }\n        else if (!this._subscription) {\n            this._subscription = this._ngZone.runOutsideAngular(() => {\n                return this._contentObserver\n                    .observe(this._elementRef)\n                    .subscribe(() => {\n                    /** @type {?} */\n                    const element = this._elementRef.nativeElement;\n                    this._liveAnnouncer.announce(element.textContent, this._politeness);\n                });\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n    }\n}\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) { return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkAriaLive.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAriaLive, selectors: [[\"\", \"cdkAriaLive\", \"\"]], inputs: { politeness: [\"cdkAriaLive\", \"politeness\"] }, exportAs: [\"cdkAriaLive\"] });\n/** @nocollapse */\nCdkAriaLive.ctorParameters = () => [\n    { type: ElementRef },\n    { type: LiveAnnouncer },\n    { type: ContentObserver },\n    { type: NgZone }\n];\nCdkAriaLive.propDecorators = {\n    politeness: [{ type: Input, args: ['cdkAriaLive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAriaLive]',\n                exportAs: 'cdkAriaLive'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: LiveAnnouncer }, { type: ɵngcc2.ContentObserver }, { type: ɵngcc0.NgZone }]; }, { politeness: [{\n            type: Input,\n            args: ['cdkAriaLive']\n        }] }); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} liveElement\n * @param {?} _document\n * @param {?} ngZone\n * @return {?}\n */\nfunction LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher, liveElement, _document, ngZone) {\n    return parentDispatcher || new LiveAnnouncer(liveElement, _document, ngZone);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst LIVE_ANNOUNCER_PROVIDER = {\n    // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n    provide: LiveAnnouncer,\n    deps: [\n        [new Optional(), new SkipSelf(), LiveAnnouncer],\n        [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)],\n        DOCUMENT,\n        NgZone,\n    ],\n    useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst TOUCH_BUFFER_MS = 650;\n/**\n * Monitors mouse and keyboard events to determine the cause of focus events.\n */\nclass FocusMonitor {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     */\n    constructor(_ngZone, _platform) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * The focus origin that the next focus event is a result of.\n         */\n        this._origin = null;\n        /**\n         * Whether the window has just been focused.\n         */\n        this._windowFocused = false;\n        /**\n         * Map of elements being monitored to their info.\n         */\n        this._elementInfo = new Map();\n        /**\n         * A map of global objects to lists of current listeners.\n         */\n        this._unregisterGlobalListeners = () => { };\n        /**\n         * The number of elements currently being monitored.\n         */\n        this._monitoredElementCount = 0;\n    }\n    /**\n     * @param {?} element\n     * @param {?=} checkChildren\n     * @return {?}\n     */\n    monitor(element, checkChildren = false) {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return of(null);\n        }\n        /** @type {?} */\n        const nativeElement = this._getNativeElement(element);\n        // Check if we're already monitoring this element.\n        if (this._elementInfo.has(nativeElement)) {\n            /** @type {?} */\n            let cachedInfo = this._elementInfo.get(nativeElement); /** @type {?} */\n            ((cachedInfo)).checkChildren = checkChildren;\n            return /** @type {?} */ ((cachedInfo)).subject.asObservable();\n        }\n        /** @type {?} */\n        let info = {\n            unlisten: () => { },\n            checkChildren: checkChildren,\n            subject: new Subject()\n        };\n        this._elementInfo.set(nativeElement, info);\n        this._incrementMonitoredElementCount();\n        /** @type {?} */\n        let focusListener = (event) => this._onFocus(event, nativeElement);\n        /** @type {?} */\n        let blurListener = (event) => this._onBlur(event, nativeElement);\n        this._ngZone.runOutsideAngular(() => {\n            nativeElement.addEventListener('focus', focusListener, true);\n            nativeElement.addEventListener('blur', blurListener, true);\n        });\n        // Create an unlisten function for later.\n        info.unlisten = () => {\n            nativeElement.removeEventListener('focus', focusListener, true);\n            nativeElement.removeEventListener('blur', blurListener, true);\n        };\n        return info.subject.asObservable();\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    stopMonitoring(element) {\n        /** @type {?} */\n        const nativeElement = this._getNativeElement(element);\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(nativeElement);\n        if (elementInfo) {\n            elementInfo.unlisten();\n            elementInfo.subject.complete();\n            this._setClasses(nativeElement);\n            this._elementInfo.delete(nativeElement);\n            this._decrementMonitoredElementCount();\n        }\n    }\n    /**\n     * @param {?} element\n     * @param {?} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focusVia(element, origin, options) {\n        /** @type {?} */\n        const nativeElement = this._getNativeElement(element);\n        this._setOriginForCurrentEventQueue(origin);\n        // `focus` isn't available on the server\n        if (typeof nativeElement.focus === 'function') {\n            // Cast the element to `any`, because the TS typings don't have the `options` parameter yet.\n            (/** @type {?} */ (nativeElement)).focus(options);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    /**\n     * Register necessary event listeners on the document and window.\n     * @return {?}\n     */\n    _registerGlobalListeners() {\n        // Do nothing if we're not on the browser platform.\n        if (!this._platform.isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        let documentKeydownListener = () => {\n            this._lastTouchTarget = null;\n            this._setOriginForCurrentEventQueue('keyboard');\n        };\n        /** @type {?} */\n        let documentMousedownListener = () => {\n            if (!this._lastTouchTarget) {\n                this._setOriginForCurrentEventQueue('mouse');\n            }\n        };\n        /** @type {?} */\n        let documentTouchstartListener = (event) => {\n            if (this._touchTimeoutId != null) {\n                clearTimeout(this._touchTimeoutId);\n            }\n            this._lastTouchTarget = event.target;\n            this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\n        };\n        /** @type {?} */\n        let windowFocusListener = () => {\n            this._windowFocused = true;\n            this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\n        };\n        // Note: we listen to events in the capture phase so we can detect them even if the user stops\n        // propagation.\n        this._ngZone.runOutsideAngular(() => {\n            document.addEventListener('keydown', documentKeydownListener, true);\n            document.addEventListener('mousedown', documentMousedownListener, true);\n            document.addEventListener('touchstart', documentTouchstartListener, supportsPassiveEventListeners() ? (/** @type {?} */ ({ passive: true, capture: true })) : true);\n            window.addEventListener('focus', windowFocusListener);\n        });\n        this._unregisterGlobalListeners = () => {\n            document.removeEventListener('keydown', documentKeydownListener, true);\n            document.removeEventListener('mousedown', documentMousedownListener, true);\n            document.removeEventListener('touchstart', documentTouchstartListener, supportsPassiveEventListeners() ? (/** @type {?} */ ({ passive: true, capture: true })) : true);\n            window.removeEventListener('focus', windowFocusListener);\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n            clearTimeout(this._windowFocusTimeoutId);\n            clearTimeout(this._touchTimeoutId);\n            clearTimeout(this._originTimeoutId);\n        };\n    }\n    /**\n     * @param {?} element\n     * @param {?} className\n     * @param {?} shouldSet\n     * @return {?}\n     */\n    _toggleClass(element, className, shouldSet) {\n        if (shouldSet) {\n            element.classList.add(className);\n        }\n        else {\n            element.classList.remove(className);\n        }\n    }\n    /**\n     * Sets the focus classes on the element based on the given focus origin.\n     * @param {?} element The element to update the classes on.\n     * @param {?=} origin The focus origin.\n     * @return {?}\n     */\n    _setClasses(element, origin) {\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (elementInfo) {\n            this._toggleClass(element, 'cdk-focused', !!origin);\n            this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n            this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n            this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n            this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n        }\n    }\n    /**\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\n     * @param {?} origin The origin to set.\n     * @return {?}\n     */\n    _setOriginForCurrentEventQueue(origin) {\n        this._ngZone.runOutsideAngular(() => {\n            this._origin = origin;\n            // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n            // tick after the interaction event fired. To ensure the focus origin is always correct,\n            // the focus origin will be determined at the beginning of the next tick.\n            this._originTimeoutId = setTimeout(() => this._origin = null, 1);\n        });\n    }\n    /**\n     * Checks whether the given focus event was caused by a touchstart event.\n     * @param {?} event The focus event to check.\n     * @return {?} Whether the event was caused by a touch.\n     */\n    _wasCausedByTouch(event) {\n        /** @type {?} */\n        let focusTarget = event.target;\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n    /**\n     * Handles focus events on a registered element.\n     * @param {?} event The focus event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    _onFocus(event, element) {\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (!elementInfo.checkChildren && element !== event.target)) {\n            return;\n        }\n        /** @type {?} */\n        let origin = this._origin;\n        if (!origin) {\n            if (this._windowFocused && this._lastFocusOrigin) {\n                origin = this._lastFocusOrigin;\n            }\n            else if (this._wasCausedByTouch(event)) {\n                origin = 'touch';\n            }\n            else {\n                origin = 'program';\n            }\n        }\n        this._setClasses(element, origin);\n        this._emitOrigin(elementInfo.subject, origin);\n        this._lastFocusOrigin = origin;\n    }\n    /**\n     * Handles blur events on a registered element.\n     * @param {?} event The blur event.\n     * @param {?} element The monitored element.\n     * @return {?}\n     */\n    _onBlur(event, element) {\n        /** @type {?} */\n        const elementInfo = this._elementInfo.get(element);\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\n            element.contains(event.relatedTarget))) {\n            return;\n        }\n        this._setClasses(element);\n        this._emitOrigin(elementInfo.subject, null);\n    }\n    /**\n     * @param {?} subject\n     * @param {?} origin\n     * @return {?}\n     */\n    _emitOrigin(subject, origin) {\n        this._ngZone.run(() => subject.next(origin));\n    }\n    /**\n     * @return {?}\n     */\n    _incrementMonitoredElementCount() {\n        // Register global listeners when first element is monitored.\n        if (++this._monitoredElementCount == 1) {\n            this._registerGlobalListeners();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _decrementMonitoredElementCount() {\n        // Unregister global listeners when last element is unmonitored.\n        if (!--this._monitoredElementCount) {\n            this._unregisterGlobalListeners();\n            this._unregisterGlobalListeners = () => { };\n        }\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    _getNativeElement(element) {\n        return element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) { return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nFocusMonitor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FocusMonitor, factory: FocusMonitor.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nFocusMonitor.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform }\n];\n/** @nocollapse */ FocusMonitor.ngInjectableDef = defineInjectable({ factory: function FocusMonitor_Factory() { return new FocusMonitor(inject(NgZone), inject(Platform)); }, token: FocusMonitor, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }]; }, null); })();\n/**\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\n * programmatically) and adds corresponding classes to the element.\n *\n * There are two variants of this directive:\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\n *    focused.\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\n */\nclass CdkMonitorFocus {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusMonitor\n     */\n    constructor(_elementRef, _focusMonitor) {\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this.cdkFocusChange = new EventEmitter();\n        this._monitorSubscription = this._focusMonitor.monitor(this._elementRef, this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\n            .subscribe(origin => this.cdkFocusChange.emit(origin));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._monitorSubscription.unsubscribe();\n    }\n}\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) { return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor)); };\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkMonitorFocus, selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]], outputs: { cdkFocusChange: \"cdkFocusChange\" } });\n/** @nocollapse */\nCdkMonitorFocus.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor }\n];\nCdkMonitorFocus.propDecorators = {\n    cdkFocusChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusMonitor }]; }, { cdkFocusChange: [{\n            type: Output\n        }] }); })();\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentDispatcher\n * @param {?} ngZone\n * @param {?} platform\n * @return {?}\n */\nfunction FOCUS_MONITOR_PROVIDER_FACTORY(parentDispatcher, ngZone, platform) {\n    return parentDispatcher || new FocusMonitor(ngZone, platform);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nconst FOCUS_MONITOR_PROVIDER = {\n    // If there is already a FocusMonitor available, use that. Otherwise, provide a new one.\n    provide: FocusMonitor,\n    deps: [[new Optional(), new SkipSelf(), FocusMonitor], NgZone, Platform],\n    useFactory: FOCUS_MONITOR_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Screenreaders will often fire fake mousedown events when a focusable element\n * is activated using the keyboard. We can typically distinguish between these faked\n * mousedown events and real mousedown events using the \"buttons\" property. While\n * real mousedowns will indicate the mouse button that was pressed (e.g. \"1\" for\n * the left mouse button), faked mousedowns will usually set the property value to 0.\n * @param {?} event\n * @return {?}\n */\nfunction isFakeMousedownFromScreenReader(event) {\n    return event.buttons === 0;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nclass A11yModule {\n}\nA11yModule.ɵfac = function A11yModule_Factory(t) { return new (t || A11yModule)(); };\nA11yModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: A11yModule });\nA11yModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule, PlatformModule, ObserversModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, PlatformModule, ObserversModule],\n                declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, { declarations: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; }, imports: function () { return [CommonModule, PlatformModule, ObserversModule]; }, exports: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { ARIA_DESCRIBER_PROVIDER_FACTORY, MESSAGES_CONTAINER_ID, CDK_DESCRIBEDBY_ID_PREFIX, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, AriaDescriber, ARIA_DESCRIBER_PROVIDER, ActiveDescendantKeyManager, FocusKeyManager, ListKeyManager, FocusTrap, FocusTrapFactory, CdkTrapFocus, InteractivityChecker, LIVE_ANNOUNCER_PROVIDER_FACTORY, LiveAnnouncer, CdkAriaLive, LIVE_ANNOUNCER_PROVIDER, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, LIVE_ANNOUNCER_ELEMENT_TOKEN, FOCUS_MONITOR_PROVIDER_FACTORY, TOUCH_BUFFER_MS, FocusMonitor, CdkMonitorFocus, FOCUS_MONITOR_PROVIDER, isFakeMousedownFromScreenReader, A11yModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}