{"ast":null,"code":"import { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\nexport function animationFrames(timestampProvider) {\n  return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\nfunction animationFramesFactory(timestampProvider) {\n  const {\n    schedule\n  } = animationFrameProvider;\n  return new Observable(subscriber => {\n    const subscription = new Subscription();\n    const provider = timestampProvider || performanceTimestampProvider;\n    const start = provider.now();\n    const run = timestamp => {\n      const now = provider.now();\n      subscriber.next({\n        timestamp: timestampProvider ? now : timestamp,\n        elapsed: now - start\n      });\n      if (!subscriber.closed) {\n        subscription.add(schedule(run));\n      }\n    };\n    subscription.add(schedule(run));\n    return subscription;\n  });\n}\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();","map":{"version":3,"names":["Observable","Subscription","performanceTimestampProvider","animationFrameProvider","animationFrames","timestampProvider","animationFramesFactory","DEFAULT_ANIMATION_FRAMES","schedule","subscriber","subscription","provider","start","now","run","timestamp","next","elapsed","closed","add"],"sources":["C:/duel-zone/Web/ClientApp/node_modules/rxjs/dist/esm/internal/observable/dom/animationFrames.js"],"sourcesContent":["import { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\nexport function animationFrames(timestampProvider) {\n    return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\nfunction animationFramesFactory(timestampProvider) {\n    const { schedule } = animationFrameProvider;\n    return new Observable((subscriber) => {\n        const subscription = new Subscription();\n        const provider = timestampProvider || performanceTimestampProvider;\n        const start = provider.now();\n        const run = (timestamp) => {\n            const now = provider.now();\n            subscriber.next({\n                timestamp: timestampProvider ? now : timestamp,\n                elapsed: now - start,\n            });\n            if (!subscriber.closed) {\n                subscription.add(schedule(run));\n            }\n        };\n        subscription.add(schedule(run));\n        return subscription;\n    });\n}\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,4BAA4B,QAAQ,8CAA8C;AAC3F,SAASC,sBAAsB,QAAQ,wCAAwC;AAC/E,OAAO,SAASC,eAAe,CAACC,iBAAiB,EAAE;EAC/C,OAAOA,iBAAiB,GAAGC,sBAAsB,CAACD,iBAAiB,CAAC,GAAGE,wBAAwB;AACnG;AACA,SAASD,sBAAsB,CAACD,iBAAiB,EAAE;EAC/C,MAAM;IAAEG;EAAS,CAAC,GAAGL,sBAAsB;EAC3C,OAAO,IAAIH,UAAU,CAAES,UAAU,IAAK;IAClC,MAAMC,YAAY,GAAG,IAAIT,YAAY,EAAE;IACvC,MAAMU,QAAQ,GAAGN,iBAAiB,IAAIH,4BAA4B;IAClE,MAAMU,KAAK,GAAGD,QAAQ,CAACE,GAAG,EAAE;IAC5B,MAAMC,GAAG,GAAIC,SAAS,IAAK;MACvB,MAAMF,GAAG,GAAGF,QAAQ,CAACE,GAAG,EAAE;MAC1BJ,UAAU,CAACO,IAAI,CAAC;QACZD,SAAS,EAAEV,iBAAiB,GAAGQ,GAAG,GAAGE,SAAS;QAC9CE,OAAO,EAAEJ,GAAG,GAAGD;MACnB,CAAC,CAAC;MACF,IAAI,CAACH,UAAU,CAACS,MAAM,EAAE;QACpBR,YAAY,CAACS,GAAG,CAACX,QAAQ,CAACM,GAAG,CAAC,CAAC;MACnC;IACJ,CAAC;IACDJ,YAAY,CAACS,GAAG,CAACX,QAAQ,CAACM,GAAG,CAAC,CAAC;IAC/B,OAAOJ,YAAY;EACvB,CAAC,CAAC;AACN;AACA,MAAMH,wBAAwB,GAAGD,sBAAsB,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}