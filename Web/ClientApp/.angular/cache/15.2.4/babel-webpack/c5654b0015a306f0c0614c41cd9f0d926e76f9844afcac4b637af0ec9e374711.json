{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nclass MutationObserverFactory {\n  /**\n   * @param {?} callback\n   * @return {?}\n   */\n  create(callback) {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) {\n  return new (t || MutationObserverFactory)();\n};\nMutationObserverFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MutationObserverFactory,\n  factory: MutationObserverFactory.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nMutationObserverFactory.ngInjectableDef = defineInjectable({\n  factory: function MutationObserverFactory_Factory() {\n    return new MutationObserverFactory();\n  },\n  token: MutationObserverFactory,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * An injectable service that allows watching elements for changes to their content.\n */\nclass ContentObserver {\n  /**\n   * @param {?} _mutationObserverFactory\n   */\n  constructor(_mutationObserverFactory) {\n    this._mutationObserverFactory = _mutationObserverFactory;\n    /**\n     * Keeps track of the existing MutationObservers so they can be reused.\n     */\n    this._observedElements = new Map();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n  /**\n   * @param {?} elementOrRef\n   * @return {?}\n   */\n  observe(elementOrRef) {\n    /** @type {?} */\n    const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n    return Observable.create(observer => {\n      /** @type {?} */\n      const stream = this._observeElement(element);\n      /** @type {?} */\n      const subscription = stream.subscribe(observer);\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   * @param {?} element\n   * @return {?}\n   */\n  _observeElement(element) {\n    if (!this._observedElements.has(element)) {\n      /** @type {?} */\n      const stream = new Subject();\n      /** @type {?} */\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {\n        observer,\n        stream,\n        count: 1\n      });\n    } else {\n      /** @type {?} */this._observedElements.get(element).count++;\n    }\n    return (/** @type {?} */this._observedElements.get(element).stream\n    );\n  }\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   * @param {?} element\n   * @return {?}\n   */\n  _unobserveElement(element) {\n    if (this._observedElements.has(element)) {\n      /** @type {?} */this._observedElements.get(element).count--;\n      if (! /** @type {?} */this._observedElements.get(element).count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n  /**\n   * Clean up the underlying MutationObserver for the specified element.\n   * @param {?} element\n   * @return {?}\n   */\n  _cleanupObserver(element) {\n    if (this._observedElements.has(element)) {\n      const {\n        observer,\n        stream\n      } = /** @type {?} */this._observedElements.get(element);\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\nContentObserver.ɵfac = function ContentObserver_Factory(t) {\n  return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory));\n};\nContentObserver.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ContentObserver,\n  factory: ContentObserver.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nContentObserver.ctorParameters = () => [{\n  type: MutationObserverFactory\n}];\n/** @nocollapse */\nContentObserver.ngInjectableDef = defineInjectable({\n  factory: function ContentObserver_Factory() {\n    return new ContentObserver(inject(MutationObserverFactory));\n  },\n  token: ContentObserver,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MutationObserverFactory\n    }];\n  }, null);\n})();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n  /**\n   * @param {?} _contentObserver\n   * @param {?} _elementRef\n   * @param {?} _ngZone\n   */\n  constructor(_contentObserver, _elementRef, _ngZone) {\n    this._contentObserver = _contentObserver;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /**\n     * Event emitted for each change in the element's content.\n     */\n    this.event = new EventEmitter();\n    this._disabled = false;\n    this._currentSubscription = null;\n  }\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   * @return {?}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  /**\n   * Debounce interval for emitting the changes.\n   * @return {?}\n   */\n  get debounce() {\n    return this._debounce;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set debounce(value) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n  /**\n   * @return {?}\n   */\n  _subscribe() {\n    this._unsubscribe();\n    /** @type {?} */\n    const stream = this._contentObserver.observe(this._elementRef);\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n  /**\n   * @return {?}\n   */\n  _unsubscribe() {\n    if (this._currentSubscription) {\n      this._currentSubscription.unsubscribe();\n    }\n  }\n}\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) {\n  return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\nCdkObserveContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkObserveContent,\n  selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n  inputs: {\n    disabled: [\"cdkObserveContentDisabled\", \"disabled\"],\n    debounce: \"debounce\"\n  },\n  outputs: {\n    event: \"cdkObserveContent\"\n  },\n  exportAs: [\"cdkObserveContent\"]\n});\n/** @nocollapse */\nCdkObserveContent.ctorParameters = () => [{\n  type: ContentObserver\n}, {\n  type: ElementRef\n}, {\n  type: NgZone\n}];\nCdkObserveContent.propDecorators = {\n  event: [{\n    type: Output,\n    args: ['cdkObserveContent']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['cdkObserveContentDisabled']\n  }],\n  debounce: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkObserveContent]',\n      exportAs: 'cdkObserveContent'\n    }]\n  }], function () {\n    return [{\n      type: ContentObserver\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    event: [{\n      type: Output,\n      args: ['cdkObserveContent']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkObserveContentDisabled']\n    }],\n    debounce: [{\n      type: Input\n    }]\n  });\n})();\nclass ObserversModule {}\nObserversModule.ɵfac = function ObserversModule_Factory(t) {\n  return new (t || ObserversModule)();\n};\nObserversModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ObserversModule\n});\nObserversModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MutationObserverFactory]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkObserveContent],\n      declarations: [CdkObserveContent],\n      providers: [MutationObserverFactory]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, {\n    declarations: [CdkObserveContent],\n    exports: [CdkObserveContent]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule };","map":{"version":3,"names":["coerceBooleanProperty","coerceNumberProperty","Directive","ElementRef","EventEmitter","Injectable","Input","NgModule","NgZone","Output","defineInjectable","inject","Observable","Subject","debounceTime","ɵngcc0","MutationObserverFactory","create","callback","MutationObserver","ɵfac","MutationObserverFactory_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngInjectableDef","ngDevMode","ɵsetClassMetadata","type","args","ContentObserver","constructor","_mutationObserverFactory","_observedElements","Map","ngOnDestroy","forEach","_","element","_cleanupObserver","observe","elementOrRef","nativeElement","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","mutations","next","characterData","childList","subtree","set","count","get","disconnect","complete","delete","ContentObserver_Factory","ɵɵinject","ctorParameters","CdkObserveContent","_contentObserver","_elementRef","_ngZone","event","_disabled","_currentSubscription","disabled","value","_unsubscribe","_subscribe","debounce","_debounce","ngAfterContentInit","runOutsideAngular","pipe","CdkObserveContent_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","outputs","exportAs","propDecorators","selector","ObserversModule","ObserversModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/duel-zone/Web/ClientApp/node_modules/@angular/cdk/__ivy_ngcc__/esm2015/observers.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nclass MutationObserverFactory {\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    create(callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n}\nMutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t) { return new (t || MutationObserverFactory)(); };\nMutationObserverFactory.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MutationObserverFactory, factory: MutationObserverFactory.ɵfac, providedIn: 'root' });\n/** @nocollapse */ MutationObserverFactory.ngInjectableDef = defineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MutationObserverFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], null, null); })();\n/**\n * An injectable service that allows watching elements for changes to their content.\n */\nclass ContentObserver {\n    /**\n     * @param {?} _mutationObserverFactory\n     */\n    constructor(_mutationObserverFactory) {\n        this._mutationObserverFactory = _mutationObserverFactory;\n        /**\n         * Keeps track of the existing MutationObservers so they can be reused.\n         */\n        this._observedElements = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    observe(elementOrRef) {\n        /** @type {?} */\n        const element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n        return Observable.create((observer) => {\n            /** @type {?} */\n            const stream = this._observeElement(element);\n            /** @type {?} */\n            const subscription = stream.subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                this._unobserveElement(element);\n            };\n        });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     * @param {?} element\n     * @return {?}\n     */\n    _observeElement(element) {\n        if (!this._observedElements.has(element)) {\n            /** @type {?} */\n            const stream = new Subject();\n            /** @type {?} */\n            const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n            if (observer) {\n                observer.observe(element, {\n                    characterData: true,\n                    childList: true,\n                    subtree: true\n                });\n            }\n            this._observedElements.set(element, { observer, stream, count: 1 });\n        }\n        else {\n            /** @type {?} */ ((this._observedElements.get(element))).count++;\n        }\n        return /** @type {?} */ ((this._observedElements.get(element))).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     * @param {?} element\n     * @return {?}\n     */\n    _unobserveElement(element) {\n        if (this._observedElements.has(element)) {\n            /** @type {?} */ ((this._observedElements.get(element))).count--;\n            if (!/** @type {?} */ ((this._observedElements.get(element))).count) {\n                this._cleanupObserver(element);\n            }\n        }\n    }\n    /**\n     * Clean up the underlying MutationObserver for the specified element.\n     * @param {?} element\n     * @return {?}\n     */\n    _cleanupObserver(element) {\n        if (this._observedElements.has(element)) {\n            const { observer, stream } = /** @type {?} */ ((this._observedElements.get(element)));\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this._observedElements.delete(element);\n        }\n    }\n}\nContentObserver.ɵfac = function ContentObserver_Factory(t) { return new (t || ContentObserver)(ɵngcc0.ɵɵinject(MutationObserverFactory)); };\nContentObserver.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ContentObserver, factory: ContentObserver.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nContentObserver.ctorParameters = () => [\n    { type: MutationObserverFactory }\n];\n/** @nocollapse */ ContentObserver.ngInjectableDef = defineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(inject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContentObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MutationObserverFactory }]; }, null); })();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n    /**\n     * @param {?} _contentObserver\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     */\n    constructor(_contentObserver, _elementRef, _ngZone) {\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * Event emitted for each change in the element's content.\n         */\n        this.event = new EventEmitter();\n        this._disabled = false;\n        this._currentSubscription = null;\n    }\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /**\n     * Debounce interval for emitting the changes.\n     * @return {?}\n     */\n    get debounce() { return this._debounce; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set debounce(value) {\n        this._debounce = coerceNumberProperty(value);\n        this._subscribe();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        if (!this._currentSubscription && !this.disabled) {\n            this._subscribe();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n    _subscribe() {\n        this._unsubscribe();\n        /** @type {?} */\n        const stream = this._contentObserver.observe(this._elementRef);\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n        // Consider brining it back inside the zone next time we're making breaking changes.\n        // Bringing it back inside can cause things like infinite change detection loops and changed\n        // after checked errors if people's code isn't handling it properly.\n        this._ngZone.runOutsideAngular(() => {\n            this._currentSubscription =\n                (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n        });\n    }\n    /**\n     * @return {?}\n     */\n    _unsubscribe() {\n        if (this._currentSubscription) {\n            this._currentSubscription.unsubscribe();\n        }\n    }\n}\nCdkObserveContent.ɵfac = function CdkObserveContent_Factory(t) { return new (t || CdkObserveContent)(ɵngcc0.ɵɵdirectiveInject(ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkObserveContent.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkObserveContent, selectors: [[\"\", \"cdkObserveContent\", \"\"]], inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\"], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"] });\n/** @nocollapse */\nCdkObserveContent.ctorParameters = () => [\n    { type: ContentObserver },\n    { type: ElementRef },\n    { type: NgZone }\n];\nCdkObserveContent.propDecorators = {\n    event: [{ type: Output, args: ['cdkObserveContent',] }],\n    disabled: [{ type: Input, args: ['cdkObserveContentDisabled',] }],\n    debounce: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkObserveContent, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkObserveContent]',\n                exportAs: 'cdkObserveContent'\n            }]\n    }], function () { return [{ type: ContentObserver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { event: [{\n            type: Output,\n            args: ['cdkObserveContent']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkObserveContentDisabled']\n        }], debounce: [{\n            type: Input\n        }] }); })();\nclass ObserversModule {\n}\nObserversModule.ɵfac = function ObserversModule_Factory(t) { return new (t || ObserversModule)(); };\nObserversModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ObserversModule });\nObserversModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MutationObserverFactory] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ObserversModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkObserveContent],\n                declarations: [CdkObserveContent],\n                providers: [MutationObserverFactory]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ObserversModule, { declarations: [CdkObserveContent], exports: [CdkObserveContent] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}