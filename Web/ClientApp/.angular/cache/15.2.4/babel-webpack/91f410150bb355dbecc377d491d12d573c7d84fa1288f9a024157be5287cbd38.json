{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/table\";\nfunction DeckComponent_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction DeckComponent_mat_header_cell_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-header-cell\");\n    i0.ɵɵtext(1, \" Quanitity \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DeckComponent_mat_cell_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-cell\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const card_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", card_r7.quantity, \" \");\n  }\n}\nfunction DeckComponent_mat_header_cell_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-header-cell\");\n    i0.ɵɵtext(1, \" Name \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DeckComponent_mat_cell_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-cell\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const card_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", card_r8.name, \" \");\n  }\n}\nfunction DeckComponent_mat_header_cell_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-header-cell\");\n    i0.ɵɵtext(1, \" Remove \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DeckComponent_mat_header_row_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-header-row\");\n  }\n}\n//import { HttpClient } from '@angular/common/http';\nexport class DeckComponent {\n  constructor() {\n    this.id = 0;\n    this.deckCards = [];\n    this.columnsToDisplay = ['quantity', 'name', 'remove'];\n  }\n  //public deckCards: Observable<DeckCard[]> = of([]); // = [{ id: this.id++, quantity: 1, name: \"Example\" }];\n  onAdded(cardName) {\n    let foo = this.deckCards;\n    foo.push({\n      id: this.id++,\n      quantity: 1,\n      name: cardName\n    });\n    this.deckCards = foo;\n    //foo.\n    //this.deckCards.push({ id: this.id++, quantity: 1, name: cardName });\n  }\n\n  identify(index, item) {\n    return item.id;\n  }\n}\nDeckComponent.ɵfac = function DeckComponent_Factory(t) {\n  return new (t || DeckComponent)();\n};\nDeckComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DeckComponent,\n  selectors: [[\"app-deck\"]],\n  decls: 13,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"matColumnDef\", \"quantity\"], [4, \"matHeaderCellDef\"], [4, \"matCellDef\"], [\"matColumnDef\", \"name\"], [\"matColumnDef\", \"remove\"], [4, \"matHeaderRowDef\"]],\n  template: function DeckComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Deck\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, DeckComponent_p_2_Template, 3, 0, \"p\", 0);\n      i0.ɵɵelementStart(3, \"mat-table\");\n      i0.ɵɵelementContainerStart(4, 1);\n      i0.ɵɵtemplate(5, DeckComponent_mat_header_cell_5_Template, 2, 0, \"mat-header-cell\", 2);\n      i0.ɵɵtemplate(6, DeckComponent_mat_cell_6_Template, 2, 1, \"mat-cell\", 3);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(7, 4);\n      i0.ɵɵtemplate(8, DeckComponent_mat_header_cell_8_Template, 2, 0, \"mat-header-cell\", 2);\n      i0.ɵɵtemplate(9, DeckComponent_mat_cell_9_Template, 2, 1, \"mat-cell\", 3);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(10, 5);\n      i0.ɵɵtemplate(11, DeckComponent_mat_header_cell_11_Template, 2, 0, \"mat-header-cell\", 2);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(12, DeckComponent_mat_header_row_12_Template, 1, 0, \"mat-header-row\", 6);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.deckCards);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.columnsToDisplay);\n    }\n  },\n  dependencies: [i1.NgIf, i2.MatTable, i2.MatHeaderCellDef, i2.MatHeaderRowDef, i2.MatColumnDef, i2.MatCellDef, i2.MatHeaderCell, i2.MatCell, i2.MatHeaderRow],\n  encapsulation: 2\n});\nDeckComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DeckComponent,\n  factory: DeckComponent.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;IACAA,yBAAsB;IAAIA,0BAAU;IAAAA,iBAAK;;;;;IAmBrCA,uCAAmC;IAACA,2BAAU;IAAAA,iBAAkB;;;;;IAChEA,gCAAiC;IAACA,YAAkB;IAAAA,iBAAW;;;;IAA7BA,eAAkB;IAAlBA,iDAAkB;;;;;IAGpDA,uCAAmC;IAACA,sBAAK;IAAAA,iBAAkB;;;;;IAC3DA,gCAAiC;IAACA,YAAc;IAAAA,iBAAW;;;;IAAzBA,eAAc;IAAdA,6CAAc;;;;;IAGhDA,uCAAmC;IAACA,wBAAO;IAAAA,iBAAkB;;;;;IAE/DA,iCAAqE;;;AC3BvE;AAQA,OAAM,MAAOC,aAAa;EAN1BC;IAOE,OAAE,GAAW,CAAC;IACP,cAAS,GAAe,EAAE;IAC1B,qBAAgB,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE,QAAQ,CAAC;;EACxD;EAEOC,OAAO,CAACC,QAAgB;IAC7B,IAAIC,GAAG,GAAG,IAAI,CAACC,SAAS;IACxBD,GAAG,CAACE,IAAI,CAAC;MAAEC,EAAE,EAAE,IAAI,CAACA,EAAE,EAAE;MAAEC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAEN;IAAQ,CAAE,CAAC;IACxD,IAAI,CAACE,SAAS,GAAGD,GAAG;IACpB;IAEA;EACF;;EAEAM,QAAQ,CAACC,KAAa,EAAEC,IAAc;IACpC,OAAOA,IAAI,CAACL,EAAE;EAChB;;AAjBWP,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAa;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDX1BlB,0BAAI;MAAAA,oBAAI;MAAAA,iBAAK;MACbA,0DAA6C;MAiB7CA,iCAAW;MACTA,gCAAsC;MACpCA,sFAAgE;MAChEA,wEAA+D;MACjEA,0BAAe;MACfA,gCAAkC;MAChCA,sFAA2D;MAC3DA,wEAA2D;MAC7DA,0BAAe;MACfA,iCAAoC;MAClCA,wFAA6D;MAC/DA,0BAAe;MACfA,sFAAqE;MAEvEA,iBAAY;;;MA/BRA,eAAgB;MAAhBA,qCAAgB;MA6BDA,gBAAiC;MAAjCA,sDAAiC;;;;;;ACnBvCC,aAAa;SAAbA,aAAa;EAAAkB,SAAblB,aAAa;EAAAmB,YADA;AAAM","names":["i0","DeckComponent","constructor","onAdded","cardName","foo","deckCards","push","id","quantity","name","identify","index","item","selectors","decls","vars","consts","template","factory","providedIn"],"sourceRoot":"","sources":["C:\\duel-zone\\Web\\ClientApp\\src\\app\\deck\\deck.component.html","C:\\duel-zone\\Web\\ClientApp\\src\\app\\deck\\deck.component.ts"],"sourcesContent":["<h2>Deck</h2>\r\n<p *ngIf=\"!deckCards\"><em>Loading...</em></p>\r\n<!--<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"deckCards\" [dataSource]=deckCards>\r\n  <thead>\r\n    <tr>\r\n      <th>Quantity</th>\r\n      <th>Name</th>\r\n      <th></th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let card of deckCards; trackBy: identify\">\r\n      <td>{{ card.quantity }}</td>\r\n      <td>{{ card.name }}</td>\r\n      <td><button class=\"btn btn-primary\">Remove</button></td>\r\n    </tr>\r\n  </tbody>\r\n</table>-->\r\n<mat-table><!--[dataSource]=\"deckCards\"-->\r\n  <ng-container matColumnDef=\"quantity\">\r\n    <mat-header-cell *matHeaderCellDef> Quanitity </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let card\"> {{card.quantity}} </mat-cell>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"name\">\r\n    <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\r\n    <mat-cell *matCellDef=\"let card\"> {{card.name}} </mat-cell>\r\n  </ng-container>\r\n  <ng-container matColumnDef=\"remove\">\r\n    <mat-header-cell *matHeaderCellDef> Remove </mat-header-cell>\r\n  </ng-container>\r\n  <mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></mat-header-row>\r\n  <!--<mat-row *matRowDef=\"let deckCards; columns: columnsToDisplay\"></mat-row>-->\r\n</mat-table>\r\n","import { Component, Injectable, NgModule } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n//import { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'app-deck',\r\n  templateUrl: './deck.component.html'\r\n})\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DeckComponent {\r\n  id: number = 0;\r\n  public deckCards: DeckCard[] = []\r\n  public columnsToDisplay = ['quantity', 'name', 'remove'];\r\n  //public deckCards: Observable<DeckCard[]> = of([]); // = [{ id: this.id++, quantity: 1, name: \"Example\" }];\r\n\r\n  public onAdded(cardName: string) {\r\n    let foo = this.deckCards;\r\n    foo.push({ id: this.id++, quantity: 1, name: cardName });\r\n    this.deckCards = foo;\r\n    //foo.\r\n    \r\n    //this.deckCards.push({ id: this.id++, quantity: 1, name: cardName });\r\n  }\r\n\r\n  identify(index: number, item: DeckCard) {\r\n    return item.id;\r\n  }\r\n\r\n  //ngOnInit() {\r\n  //  this.deckCards.subscribe()\r\n  //}\r\n}\r\n\r\ninterface DeckCard {\r\n  id: number;\r\n  quantity: number;\r\n  name: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}