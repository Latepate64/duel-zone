using Engine.Abilities;
using Engine.Choices;
using Engine.ContinuousEffects;
using Engine.Durations;
using Engine.GameEvents;
using Engine.Zones;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Engine
{
    public class Game : IDisposable
    {
        #region Properties
        /// <summary>
        /// Players who are still in the game.
        /// </summary>
        public ICollection<Player> Players { get; } = new Collection<Player>();

        public Player Winner { get; private set; }

        public ICollection<Player> Losers { get; } = new Collection<Player>();

        /// <summary>
        /// The number of shields each player has at the start of a game. 
        /// </summary>
        public int StartingNumberOfShields { get; set; } = 5;

        /// <summary>
        /// The number of cards each player draw at the start of a game.
        /// </summary>
        public int StartingHandSize { get; set; } = 5;

        public Turn CurrentTurn => Turns.Last();

        public IEnumerable<GameEvent> GameEvents => PreGameEvents.Union(Turns.SelectMany(x => x.Phases).SelectMany(x => x.GameEvents));

        public string GameEventsText => string.Join(Environment.NewLine, GameEvents.Select(x => x.ToString()));

        /// <summary>
        /// All the turns of the game that have been or are processed, in order.
        /// </summary>
        public IList<Turn> Turns { get; } = new List<Turn>();

        /// <summary>
        /// 611.2a A continuous effect generated by the resolution of a spell or ability lasts as long as stated by the spell or ability creating it (such as “until end of turn”).
        /// If no duration is stated, it lasts until the end of the game.
        /// </summary>
        public List<ContinuousEffect> ContinuousEffects { get; } = new List<ContinuousEffect>();

        /// <summary>
        /// 500.7. Some effects can give a player extra turns.
        /// They do this by adding the turns directly after the specified turn.
        /// If a player is given multiple extra turns, the extra turns are added one at a time.
        /// If multiple players are given extra turns, the extra turns are added one at a time, in APNAP order (see rule 101.4).
        /// The most recently created turn will be taken first.
        /// </summary>
        public Stack<Turn> ExtraTurns { get; private set; } = new Stack<Turn>();

        /// <summary>
        /// 603.7. An effect may create a delayed triggered ability that can do something at a later time.
        /// A delayed triggered ability will contain “when,” “whenever,” or “at,” although that word won’t usually begin the ability.
        /// </summary>
        public List<DelayedTriggeredAbility> DelayedTriggeredAbilities { get; } = new List<DelayedTriggeredAbility>();
        #endregion Properties

        internal Queue<GameEvent> PreGameEvents = new Queue<GameEvent>();

        /// <summary>
        /// Battle Zone is the main place of the game. Creatures, Cross Gears, Weapons, Fortresses, Beats and Fields are put into the battle zone, but no mana, shields, castles nor spells may be put into the battle zone.
        /// </summary>
        public BattleZone BattleZone { get; set; } = new BattleZone(new List<Card>());

        public delegate void GameEventHandler(GameEvent gameEvent);

        public event GameEventHandler OnGameEvent;

        #region Methods
        public Game() { }

        public Game(Game game)
        {
            DelayedTriggeredAbilities = game.DelayedTriggeredAbilities.Select(x => new DelayedTriggeredAbility(x)).ToList();
            ExtraTurns = new Stack<Turn>(game.ExtraTurns.Select(x => new Turn(x)));
            StartingHandSize = game.StartingHandSize;
            StartingNumberOfShields = game.StartingNumberOfShields;
            Losers = game.Losers.Select(x => x.Copy()).ToList();
            Players = game.Players.Select(x => x.Copy()).ToList();
            if (game.Winner != null)
            {
                Winner = game.Winner.Copy();
            }
            Turns = game.Turns.Select(x => new Turn(x)).ToList();
            ContinuousEffects = game.ContinuousEffects.Select(x => x.Copy()).ToList();
            BattleZone = game.BattleZone.Copy() as BattleZone;
        }

        public override string ToString()
        {
            return $"{CurrentTurn}";
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                foreach (var x in ExtraTurns)
                {
                    x.Dispose();
                }
                ExtraTurns = null;
                foreach (var x in Players)
                {
                    x.Dispose();
                }
                Players.Clear();
                foreach (var x in DelayedTriggeredAbilities)
                {
                    x.Dispose();
                }
                DelayedTriggeredAbilities.Clear();
                foreach (var x in Turns)
                {
                    x.Dispose();
                }
                Turns.Clear();
                foreach (var x in ContinuousEffects)
                {
                    x.Dispose();
                }
                ContinuousEffects.Clear();
                BattleZone?.Dispose();
                BattleZone = null;
            }
        }

        public void Play(Player startingPlayer, Player otherPlayer)
        {
            // 103.1. At the start of a game, the players determine which one of them will choose who takes the first turn. In the first game of a match (including a single - game match), the players may use any mutually agreeable method (flipping a coin, rolling dice, etc.) to do so.In a match of several games, the loser of the previous game chooses who takes the first turn. If the previous game was a draw, the player who made the choice in that game makes the choice in this game.

            // 103.1. The player chosen to take the first turn is the starting player. The game’s default turn order begins with the starting player and proceeds clockwise.
            Players.Add(startingPlayer);
            Players.Add(otherPlayer);

            foreach (var card in GetAllCards())
            {
                card.InitializeAbilities();
            }

            // 103.2. After the starting player has been determined, each player shuffles their deck so that the cards are in a random order.
            Players.ToList().ForEach(x => x.ShuffleDeck(this));

            // Each player puts five card from to the top of their deck into their shield zone.
            Players.ToList().ForEach(x => x.PutFromTopOfDeckIntoShieldZone(StartingNumberOfShields, this));

            // 103.4. Each player draws a number of cards equal to their starting hand size, which is normally five.
            Players.ToList().ForEach(x => x.DrawCards(StartingHandSize, this));

            // 103.7. The starting player takes their first turn.
            var activePlayer = startingPlayer;
            var nonActivePlayer = otherPlayer;
            while (Players.Any())
            {
                StartNewTurn(activePlayer.Id, nonActivePlayer.Id);
                var tmp1 = activePlayer;
                var tmp2 = nonActivePlayer;
                activePlayer = tmp2;
                nonActivePlayer = tmp1;
            }
        }

        private void StartNewTurn(Guid activePlayer, Guid nonActivePlayer)
        {
            if (ExtraTurns.Any())
            {
                Turns.Add(ExtraTurns.Pop());
            }
            else
            {
                Turns.Add(new Turn { ActivePlayer = activePlayer, NonActivePlayer = nonActivePlayer });
            }
            Turns.Last().Play(this, Turns.Count);
        }

        public void Battle(Guid attackingCreatureId, Guid defendingCreatureId)
        {
            var attackingCreature = GetCard(attackingCreatureId);
            var defendingCreature = GetCard(defendingCreatureId);

            Process(new BattleEvent(attackingCreature, defendingCreature, this));

            if (attackingCreature.Power.Value > defendingCreature.Power.Value)
            {
                Outcome(attackingCreature, defendingCreature);
            }
            else if (attackingCreature.Power.Value < defendingCreature.Power.Value)
            {
                Outcome(defendingCreature, attackingCreature);
            }
            else
            {
                Destroy(new List<Card> { attackingCreature, defendingCreature });
            }

            void Outcome(Card winner, Card loser)
            {
                Process(new WinBattleEvent(winner, this));
                var destroyed = new List<Card> { loser };
                if (GetContinuousEffects<SlayerEffect>(loser).ToList().Any())
                {
                    destroyed.Add(winner);
                }
                Destroy(destroyed);
            }
        }

        public IEnumerable<Card> GetAllCards()
        {
            return Players.SelectMany(x => x.CardsInNonsharedZones).Union(BattleZone.Cards);
        }

        public void Destroy(IEnumerable<Card> cards)
        {
            _ = Move(cards, ZoneType.BattleZone, ZoneType.Graveyard);
        }

        /// <summary>
        /// 102.2. In a two-player game, a player’s opponent is the other player.
        /// </summary>
        /// <param name="player"></param>
        /// <returns>Opponent if they are still in the game, null otherwise.</returns>
        public Player GetOpponent(Player player)
        {
            return Players.SingleOrDefault(x => x != player);
        }

        /// <summary>
        /// 102.2. In a two-player game, a player’s opponent is the other player.
        /// </summary>
        /// <param name="player"></param>
        /// <returns></returns>
        public Guid GetOpponent(Guid player)
        {
            var opponent = Players.SingleOrDefault(x => x.Id != player);
            return opponent != null ? opponent.Id : Guid.Empty;
        }

        /// <summary>
        /// 108.3. The owner of a card in the game is the player who started the game with it in their deck.
        /// </summary>
        /// <param name="card"></param>
        /// <returns></returns>
        public Player GetOwner(Card card)
        {
            return Players.SingleOrDefault(x => x.Id == card?.Owner);
        }

        public Card GetCard(Guid id)
        {
            return GetAllCards().SingleOrDefault(c => c.Id == id);
        }

        /// <summary>
        /// Returns a player who is still in the game.
        /// </summary>
        /// <param name="id"></param>
        /// <returns>Player if they are still in the game, null otherwise</returns>
        public Player GetPlayer(Guid id)
        {
            return Players.SingleOrDefault(x => x.Id == id);
        }

        /// <summary>
        /// Use this method only if the type of the DuelObject is not certain.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public IAttackable GetAttackable(Guid id)
        {
            if (Players.Any(x => x.Id == id))
            {
                return GetPlayer(id);
            }
            else if (BattleZone.Creatures.Any(x => x.Id == id))
            {
                return GetCard(id);
            }
            else
            {
                return null; // It is possible that the player/card no longers exists.
            }
        }

        public void Process(GameEvent gameEvent)
        {
            OnGameEvent?.Invoke(gameEvent);
            if (Turns.Any())
            {
                CurrentTurn.CurrentPhase.GameEvents.Enqueue(gameEvent);
                foreach (var effect in ContinuousEffects.OfType<CharacteristicModifyingEffect>().ToList())
                {
                    effect.Update(this, gameEvent);
                }
                var abilities = GetAbilitiesThatTriggerFromCardsInBattleZone(gameEvent).ToList();
                List<DelayedTriggeredAbility> toBeRemoved = new List<DelayedTriggeredAbility>();
                foreach (var ability in DelayedTriggeredAbilities.Where(x => x.TriggeredAbility.CanTrigger(gameEvent, this)))
                {
                    abilities.Add(ability.TriggeredAbility.Copy() as TriggeredAbility);
                    if (ability.Duration is Once)
                    {
                        toBeRemoved.Add(ability);
                    }
                }
                _ = DelayedTriggeredAbilities.RemoveAll(x => toBeRemoved.Contains(x));
                CurrentTurn.CurrentPhase.PendingAbilities.AddRange(abilities);
                foreach (var ability in abilities)
                {
                    Process(new AbilityTriggeredEvent(ability));
                }
            }
            else
            {
                PreGameEvents.Enqueue(gameEvent);
            }
        }

        public IEnumerable<TriggeredAbility> GetAbilitiesThatTriggerFromCardsInBattleZone(GameEvent gameEvent)
        {
            var abilities = new List<TriggeredAbility>();
            foreach (var card in BattleZone.Cards)
            {
                abilities.AddRange(card.Abilities.OfType<TriggeredAbility>().Where(x => x.CanTrigger(gameEvent, this)).Select(x => x.Trigger(card.Id, card.Owner)));
            }
            return abilities;
        }

        public IEnumerable<T> GetContinuousEffects<T>(Card card) where T : ContinuousEffect
        {
            return ContinuousEffects.OfType<T>().Where(x => x.Filter.Applies(card, this, GetPlayer(card.Owner)) && x.IsActive(this, card));
        }

        public IEnumerable<Card> GetChoosableBattleZoneCreatures(Player selector)
        {
            return BattleZone.GetCreatures(selector.Id).Union(BattleZone.GetCreatures(GetOpponent(selector.Id)).Where(x => !GetContinuousEffects<UnchoosableEffect>(x).Any()));
        }

        public void Lose(Player player)
        {
            Losers.Add(player);
            Process(new LoseEvent(player.Copy()));
            Leave(player);

            // 104.2a A player still in the game wins the game if that player’s opponents have all left the game. This happens immediately and overrides all effects that would preclude that player from winning the game.
            if (Players.Count == 1)
            {
                Win(Players.Single());
            }
        }

        private void Win(Player player)
        {
            Winner = player;
            Process(new WinEvent(player.Copy()));
            Leave(player);
        }

        private void Leave(Player player)
        {
            _ = Players.Remove(player);
            _ = Move(BattleZone.Cards.Where(x => x.Owner == player.Id), ZoneType.BattleZone, ZoneType.Anywhere);
        }

        /// <summary>
        /// Only use this method if exactly one card moves between zones, otherwise use the overload that takes multiple cards.
        /// </summary>
        /// <param name="card"></param>
        /// <param name="source"></param>
        /// <param name="destination"></param>
        /// <returns></returns>
        public void Move(Card card, ZoneType source, ZoneType destination)
        {
            _ = Move(new List<Card> { card }, source, destination);
        }

        /// <summary>
        /// Moving a card into the battle zone may require a choice to be made (eg. Petrova)
        /// </summary>
        /// <param name="cards"></param>
        /// <param name="source"></param>
        /// <param name="destination"></param>
        /// 
        /// <returns></returns>
        public IEnumerable<CardMovedEvent> Move(IEnumerable<Card> cards, ZoneType source, ZoneType destination)
        {
            return Move(cards.Select(x => new CardMovedEvent(x.Owner, x.Id, source, destination, this)).ToList());
        }

        private IEnumerable<CardMovedEvent> Move(List<CardMovedEvent> events)
        {
            // TODO: Sort players by turn order
            var replacementEffects = GetReplacementEffects(events);
            var affectedCardGroups = replacementEffects.Select(x => x.EventToReplace).Cast<CardMovedEvent>().Select(x => x.CardInSourceZone).GroupBy(x => GetCard(x).Owner);
            foreach (var cardGroup in affectedCardGroups)
            {
                var effectGroups = replacementEffects.Where(x => cardGroup.Contains((x.EventToReplace as CardMovedEvent).CardInSourceZone));
                var player = GetPlayer(cardGroup.Key);
                var effectGuid = effectGroups.Count() > 1
                    ? player.Choose(new GuidSelection(player.Id, replacementEffects.Select(x => x.Id), 1, 1)).Decision.Single()
                    : effectGroups.Select(x => x.Id).Single();
                var effect = effectGroups.Single(x => x.Id == effectGuid);
                var newEvent = effect.Apply(this, player);
                if (newEvent != null)
                {
                    events = events.Where(x => x.Id != effect.EventToReplace.Id).ToList();
                    events.Add(newEvent as CardMovedEvent);
                }
            }
            foreach (var e in events)
            {
                Move(e);
                Process(e);
            }
            return events;
        }

        private void Move(CardMovedEvent e)
        {
            var player = GetPlayer(e.Player);
            var card = GetCard(e.CardInSourceZone);
            (e.Source == ZoneType.BattleZone ? BattleZone : player.GetZone(e.Source)).Remove(card, this);

            if (e.Destination != ZoneType.Anywhere)
            {
                // 400.7. An object that moves from one zone to another becomes a new object with no memory of, or relation to, its previous existence.
                var newObject = new Card(card);
                e.CardInDestinationZone = newObject.Id;
                (e.Destination == ZoneType.BattleZone ? BattleZone : player.GetZone(e.Destination)).Add(newObject, this);
            }
        }

        private List<ReplacementEffect> GetReplacementEffects(IEnumerable<CardMovedEvent> events)
        {
            var replacementEffects = new List<ReplacementEffect>();
            foreach (var moveEvent in events)
            {
                foreach (var replacementEffect in GetAllCards().SelectMany(x => GetContinuousEffects<ReplacementEffect>(x)).Where(x => x.Replaceable(moveEvent, this)))
                {
                    var effect = replacementEffect.Copy() as ReplacementEffect;
                    effect.EventToReplace = moveEvent.Copy();
                    replacementEffects.Add(effect);
                }
            }
            return replacementEffects;
        }

        public void PutFromShieldZoneToHand(IEnumerable<Card> cards, bool canUseShieldTrigger)
        {
            var events = Move(cards, ZoneType.ShieldZone, ZoneType.Hand);
            if (canUseShieldTrigger)
            {
                CheckShieldTriggers(events);
            }
        }

        private void CheckShieldTriggers(IEnumerable<CardMovedEvent> events)
        {
            var allShieldTriggers = events.Where(x => x.Destination == ZoneType.Hand).Select(x => GetCard(x.CardInDestinationZone)).Where(x => x != null && x.ShieldTrigger);
            while (allShieldTriggers.Any())
            {
                var shieldTriggersByPlayers = allShieldTriggers.GroupBy(x => x.Owner);
                foreach (var shieldTriggersByPlayer in shieldTriggersByPlayers)
                {
                    var player = GetPlayer(shieldTriggersByPlayer.Key);
                    var decision = player.Choose(new GuidSelection(player.Id, shieldTriggersByPlayer, 0, 1));
                    if (decision.Decision.Any())
                    {
                        var trigger = GetCard(decision.Decision.Single());
                        allShieldTriggers = allShieldTriggers.Where(x => x.Id != trigger.Id);
                        Process(new ShieldTriggerEvent(player.Copy(), new Card(trigger)));
                        player.UseCard(trigger, this);
                    }
                    else
                    {
                        allShieldTriggers = allShieldTriggers.Where(x => !shieldTriggersByPlayer.Select(y => y.Id).Contains(x.Id));
                    }
                }
            }
        }

        public void AddAbility(Card card, Ability ability)
        {
            card.Abilities.Add(ability);
            if (ability is StaticAbility staticAbility)
            {
                AddContinuousEffects(new List<StaticAbility> { staticAbility });
            }
        }

        public void RemoveAbility(Card card, Guid ability)
        {
            _ = ContinuousEffects.RemoveAll(x => ability == x.SourceAbility);
            _ = card.Abilities.RemoveAll(x => x.Id == ability);
        }

        internal void AddContinuousEffects(List<StaticAbility> staticAbilities)
        {
            var effects = new List<ContinuousEffect>();
            foreach (var ability in staticAbilities)
            {
                foreach (var effect in ability.ContinuousEffects)
                {
                    var copy = effect.Copy();
                    copy.SourceAbility = ability.Id;
                    if (copy is CharacteristicModifyingEffect cme)
                    {
                        cme.Start(this);
                    }
                    effects.Add(copy);
                }
            }
            ContinuousEffects.AddRange(effects);
        }
        #endregion Methods
    }
}
